// --- at top of file ---
import * as React from 'react';
import {
  Table, TableHead, TableRow, TableCell, TableBody,
  TableContainer, Select, MenuItem, Chip, Box, CircularProgress
} from '@mui/material';
import { saveSelection } from '../../api/selectionApi';
import { useToast } from '../../../../ui/feedback/useToast';

// Palette helpers you already had for chips
const ATTEST_COLORS = {
  'Meet':           { bg: '#0EA371', fg: '#fff' },     // deep green
  'Partial Meet':   { bg: '#F2B400', fg: '#111' },     // deep yellow
  'Does Not Meet':  { bg: '#D21F3C', fg: '#fff' },     // deep red
};

function AttChip({ value }) {
  if (!value) return <Chip size="small" label="—" variant="outlined" />;
  const c = ATTEST_COLORS[value] || { bg: '#EEE', fg: '#333' };
  return (
    <Chip
      size="small"
      label={value}
      sx={{ bgcolor: c.bg, color: c.fg, fontWeight: 700 }}
    />
  );
}

export default function AttributeGroupTable({
  rows = [],
  maxHeight = 'calc(100vh - 460px)',
  onRowPatched,               // (newRow) => void  (so parent can update without refetch)
}) {
  const toast = useToast();
  const [saving, setSaving] = React.useState({}); // key: rowKey -> 'saving'|'ok'|'err'

  const rowKey = (r) =>
    `${r.orgID}-${r.csF2SubcategoryID}-${r.maturityLevel}-${r.attributeNum}`;

  const patchAndSave = async (row, patch) => {
    const key = rowKey(row);
    const next = { ...row, ...patch };
    setSaving((m) => ({ ...m, [key]: 'saving' }));

    try {
      await saveSelection({
        orgID: row.orgID,
        csF2SubcategoryID: row.csF2SubcategoryID,
        csF1SubcategoryID: row.csF1SubcategoryID,
        maturityLevel: row.maturityLevel,
        attributeNum: row.attributeNum,
        selectionStatus: next.selectionStatus ?? null,
        selectionAttestation: next.selectionAttestation ?? null,
      });

      setSaving((m) => ({ ...m, [key]: 'ok' }));
      onRowPatched?.(next);                  // push change up so UI updates immediately
      toast.success('Saved');
    } catch (e) {
      setSaving((m) => ({ ...m, [key]: 'err' }));
      toast.error('Save failed');
    }
  };

  const handleStatusChange = (row, value) => {
    // If user selects Remove -> clear attestation and disable its select
    const patch =
      value === 'Remove'
        ? { selectionStatus: value, selectionAttestation: null }
        : { selectionStatus: value };
    patchAndSave(row, patch);
  };

  const handleAttChange = (row, value) => {
    patchAndSave(row, { selectionAttestation: value || null });
  };

  return (
    <TableContainer sx={{ maxHeight, overflow: 'auto', pr: 1.5, pb: 0.5 }}>
      <Table stickyHeader size="small" sx={{
        tableLayout: 'auto',
        '& th, & td': { verticalAlign: 'top' },
        '& th': { whiteSpace: 'normal' },
      }}>
        <TableHead>
          <TableRow>
            <TableCell sx={{ width: 56, textAlign: 'right' }}>#</TableCell>
            <TableCell>Attribute Definition</TableCell>
            <TableCell sx={{ width: 72, textAlign: 'center' }}>ML</TableCell>
            <TableCell sx={{ width: 110 }}>NIST 1.1</TableCell>
            <TableCell sx={{ width: 140 }}>Status</TableCell>
            <TableCell sx={{ width: 170 }}>2025 Attestation</TableCell>
            <TableCell sx={{ width: 170 }}>2024 Assessor Score</TableCell>
            <TableCell sx={{ width: 72, textAlign: 'center' }}>Actions</TableCell>
          </TableRow>
        </TableHead>

        <TableBody>
          {rows.map((r, idx) => {
            const key = rowKey(r);
            const removed = r.selectionStatus === 'Remove';
            const sv = saving[key];

            return (
              <TableRow key={key} hover>
                <TableCell sx={{ textAlign: 'right' }}>{idx + 1}</TableCell>

                {/* Attribute Definition (wrap nicely) */}
                <TableCell sx={{ whiteSpace: 'normal', wordBreak: 'break-word' }}>
                  {r.attributeDefinition}
                </TableCell>

                <TableCell sx={{ textAlign: 'center', fontWeight: 700 }}>
                  {r.maturityLevel}
                </TableCell>

                <TableCell>{r.csF1SubcategoryName}</TableCell>

                {/* Status select -> if 'Remove' we also clear attestation */}
                <TableCell>
                  <Select
                    size="small"
                    fullWidth
                    value={r.selectionStatus || ''}
                    displayEmpty
                    onChange={(e) => handleStatusChange(r, e.target.value || null)}
                    renderValue={(v) => v || '—'}
                    sx={{
                      '& .MuiSelect-select': { py: 0.5, fontWeight: 700 },
                      bgcolor: r.selectionStatus === 'Keep' ? '#E8F5EE' :
                              r.selectionStatus === 'Remove' ? '#FFE8E8' : 'transparent',
                      borderRadius: 999,
                    }}
                  >
                    <MenuItem value="">—</MenuItem>
                    <MenuItem value="Keep">Keep</MenuItem>
                    <MenuItem value="Remove">Remove</MenuItem>
                  </Select>
                </TableCell>

                {/* 2025 Attestation (disabled when removed) */}
                <TableCell>
                  {removed ? (
                    <Box sx={{ opacity: 0.5 }}>
                      <AttChip value={null} />
                    </Box>
                  ) : (
                    <Select
                      size="small"
                      fullWidth
                      value={r.selectionAttestation || ''}
                      displayEmpty
                      onChange={(e) => handleAttChange(r, e.target.value || null)}
                      renderValue={(v) => <AttChip value={v || null} />}
                      sx={{ '& .MuiSelect-select': { py: 0.5 } }}
                    >
                      <MenuItem value="">—</MenuItem>
                      <MenuItem value="Meet">Meet</MenuItem>
                      <MenuItem value="Partial Meet">Partial Meet</MenuItem>
                      <MenuItem value="Does Not Meet">Does Not Meet</MenuItem>
                    </Select>
                  )}
                </TableCell>

                {/* 2024 Assessor Score chip (read-only) */}
                <TableCell>
                  <AttChip value={r.assessScore2024} />
                </TableCell>

                {/* Actions: spinner -> check -> error; check persists after success */}
                <TableCell sx={{ whiteSpace: 'nowrap', textAlign: 'center' }}>
                  {sv === 'saving' ? (
                    <CircularProgress size={20} />
                  ) : sv === 'err' ? (
                    <Box component="span" sx={{ color: 'error.main', fontWeight: 800 }}>✕</Box>
                  ) : sv === 'ok' ? (
                    <Box component="span" sx={{ color: 'success.main', fontWeight: 800 }}>✓</Box>
                  ) : null}
                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
    </TableContainer>
  );
}
