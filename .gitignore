// src/features/attributeMapping/components/organisms/CsfTree.jsx
import * as React from 'react';
import {
  Box, Paper, Stack, Typography, IconButton, Collapse, Divider, Chip
} from '@mui/material';
import { ExpandMore, ExpandLess } from '@mui/icons-material';
import FunctionBadge from '../atoms/FunctionBadge';

export default function CsfTree({
  headers = [],
  onSelectSubcat,
  selectedSubcatID = null,
  maxHeight = 'calc(100vh - 200px)',
  activeOrgID = null,            // NEW: lets us scope counts when in compact mode
}) {
  const compactMode = !!selectedSubcatID;

  // --- Counts (two maps): all-orgs (always), and active-org (when provided) ---
  const countsAll = React.useMemo(() => {
    const m = new Map();
    headers.forEach(h => {
      const id = h.csF2SubcategoryID;
      const acc = m.get(id) || { kept: 0, removed: 0, custom: 0 };
      acc.kept    += Number(h.keptCount    || 0);
      acc.removed += Number(h.removedCount || 0);
      acc.custom  += Number(h.customCount  || 0);
      m.set(id, acc);
    });
    return m;
  }, [headers]);

  const countsActive = React.useMemo(() => {
    if (!activeOrgID) return null;
    const m = new Map();
    headers
      .filter(h => String(h.orgID) === String(activeOrgID))
      .forEach(h => {
        const id = h.csF2SubcategoryID;
        const acc = m.get(id) || { kept: 0, removed: 0, custom: 0 };
        acc.kept    += Number(h.keptCount    || 0);
        acc.removed += Number(h.removedCount || 0);
        acc.custom  += Number(h.customCount  || 0);
        m.set(id, acc);
      });
    return m;
  }, [headers, activeOrgID]);

  // Prefer per-org counts in compact mode; fall back to aggregate if missing.
  const getCounts = React.useCallback((subId) => {
    if (compactMode && countsActive) {
      const perOrg = countsActive.get(subId);
      if (perOrg && (perOrg.kept || perOrg.removed || perOrg.custom)) return perOrg;
    }
    return countsAll.get(subId) || { kept: 0, removed: 0, custom: 0 };
  }, [compactMode, countsActive, countsAll]);

  // --- Build Function -> Category -> Subcategory tree (structure uses ALL headers) ---
  const tree = React.useMemo(() => {
    const fM = new Map();
    headers.forEach(h => {
      if (!fM.has(h.functionID)) {
        fM.set(h.functionID, {
          id: h.functionID,
          name: h.functionName,
          desc: h.functionLanguage || '',
          cats: new Map(),
        });
      }
      const f = fM.get(h.functionID);

      if (!f.cats.has(h.categoryID)) {
        f.cats.set(h.categoryID, {
          id: h.categoryID,
          name: h.categoryName,
          desc: h.categoryLanguage || '',
          subs: [],
        });
      }
      const c = f.cats.get(h.categoryID);

      if (!c.subs.some(s => s.id === h.csF2SubcategoryID)) {
        c.subs.push({
          id: h.csF2SubcategoryID,
          name: h.csF2SubcategoryName,
          desc: h.csF2SubcategoryLanguage || '',
          counts: getCounts(h.csF2SubcategoryID),   // <-- scoped w/ fallback
        });
      }
    });

    return Array.from(fM.values()).map(f => ({
      ...f,
      cats: Array.from(f.cats.values()),
    }));
  }, [headers, getCounts]);

  // Auto-expand owner func/cat for the selected subcat (compact mode)
  const ownerIds = React.useMemo(() => {
    if (!selectedSubcatID) return { funcId: null, catId: null };
    for (const f of tree) {
      for (const c of f.cats) {
        if (c.subs.some(s => String(s.id) === String(selectedSubcatID))) {
          return { funcId: f.id, catId: c.id };
        }
      }
    }
    return { funcId: null, catId: null };
  }, [tree, selectedSubcatID]);

  const [openFuncs, setOpenFuncs] = React.useState(new Set());
  const [openCats, setOpenCats]   = React.useState(new Set());

  React.useEffect(() => {
    if (!compactMode || !ownerIds.funcId) return;
    setOpenFuncs(new Set([ownerIds.funcId]));
    setOpenCats(new Set([`${ownerIds.funcId}:${ownerIds.catId}`]));
  }, [compactMode, ownerIds.funcId, ownerIds.catId]);

  const toggleFunc = (fid) => {
    setOpenFuncs(prev => {
      const n = new Set(prev);
      n.has(fid) ? n.delete(fid) : n.add(fid);
      return n;
    });
  };
  const toggleCat = (fid, cid) => {
    const key = `${fid}:${cid}`;
    setOpenCats(prev => {
      const n = new Set(prev);
      n.has(key) ? n.delete(key) : n.add(key);
      return n;
    });
  };

  // Shared two-column grid (Name | Language) for expanded mode
  const twoCol = {
    display: 'grid',
    columnGap: 16,
    gridTemplateColumns: { xs: '1fr', sm: 'minmax(260px, 40%) 1fr' },
  };

  const BlackHeader = ({ left, right }) => (
    <Box
      sx={{
        bgcolor: '#111',
        color: '#fff',
        borderRadius: 1,
        px: 1.25,
        py: 0.75,
        mb: 0.75,
        fontWeight: 800,
        letterSpacing: 0.3,
      }}
    >
      <Box sx={{ ...twoCol }}>
        <Typography variant="body2">{left}</Typography>
        <Typography variant="body2">{right}</Typography>
      </Box>
    </Box>
  );

  const CategoryRow = ({ fId, cat }) => {
    const key  = `${fId}:${cat.id}`;
    const open = openCats.has(key);
    return (
      <Box sx={{ mb: 1.25 }}>
        {/* Entire row toggles */}
        <Box
          onClick={() => toggleCat(fId, cat.id)}
          sx={{
            cursor: 'pointer',
            borderRadius: 1,
            px: 1.25,
            py: 1,
            '&:hover': { bgcolor: 'action.hover' },
          }}
        >
          <Box sx={compactMode ? {} : twoCol}>
            <Typography variant="body1" fontWeight={700}>
              {cat.name}
            </Typography>
            {!compactMode && (
              <Typography variant="body2" color="text.secondary">
                {cat.desc}
              </Typography>
            )}
          </Box>
          <Box sx={{ textAlign: 'right' }}>
            <IconButton
              size="small"
              onClick={(e) => {
                e.stopPropagation();
                toggleCat(fId, cat.id);
              }}
            >
              {open ? <ExpandLess /> : <ExpandMore />}
            </IconButton>
          </Box>
        </Box>

        <Collapse in={open} unmountOnExit>
          <Divider sx={{ mb: 1 }} />
          {!compactMode && (
            <BlackHeader left="Subcategory Name" right="Subcategory Language" />
          )}

          <Box sx={{ pl: 1 }}>
            {cat.subs.map(s => {
              const selected = String(s.id) === String(selectedSubcatID);
              return (
                <Box
                  key={s.id}
                  onClick={() => onSelectSubcat?.(s.id)}
                  sx={{
                    cursor: 'pointer',
                    borderRadius: 1,
                    px: 1.25,
                    py: 0.8,
                    mb: 0.5,
                    bgcolor: selected ? 'action.selected' : 'transparent',
                    '&:hover': {
                      bgcolor: selected ? 'action.selected' : 'action.hover',
                    },
                  }}
                >
                  {/* Expanded view: NO chips. Compact view: show chips. */}
                  {!compactMode ? (
                    <Box sx={twoCol}>
                      <Typography variant="body2" fontWeight={700}>
                        {s.name}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {s.desc}
                      </Typography>
                    </Box>
                  ) : (
                    <Box>
                      <Typography variant="body2" fontWeight={700}>
                        {s.name}
                      </Typography>
                      <Typography
                        variant="caption"
                        color="text.secondary"
                        display="block"
                      >
                        {s.desc}
                      </Typography>
                      <Stack direction="row" spacing={1} sx={{ mt: 0.5 }}>
                        <Chip
                          size="small"
                          label={`${s.counts.kept} Kept`}
                          sx={{ bgcolor: '#e8f5e9', color: '#1b5e20' }}
                        />
                        <Chip
                          size="small"
                          label={`${s.counts.removed} Removed`}
                          sx={{ bgcolor: '#ffebee', color: '#b71c1c' }}
                        />
                        <Chip
                          size="small"
                          label={`${s.counts.custom} Custom`}
                          sx={{ bgcolor: '#e3f2fd', color: '#0d47a1' }}
                        />
                      </Stack>
                    </Box>
                  )}
                </Box>
              );
            })}
          </Box>
        </Collapse>
      </Box>
    );
  };

  return (
    <Box sx={{ maxHeight, overflow: 'auto' }}>
      {tree.map((f) => {
        const open = openFuncs.has(f.id);
        return (
          <Paper key={f.id} variant="outlined" sx={{ mb: 2, borderRadius: 2 }}>
            {/* Function tile */}
            <Box
              onClick={() => toggleFunc(f.id)}
              sx={{
                cursor: 'pointer',
                p: 1.25,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
              }}
            >
              <Box sx={{ flex: 1, minWidth: 0 }}>
                <Box sx={{ ...twoCol, alignItems: 'center' }}>
                  <Stack direction="row" spacing={1.25} alignItems="center">
                    <FunctionBadge functionName={f.name} />
                    <Typography variant="subtitle1" fontWeight={800}>
                      {f.name}
                    </Typography>
                  </Stack>
                  {!compactMode && (
                    <Typography variant="body2" color="text.secondary">
                      {f.desc}
                    </Typography>
                  )}
                </Box>
              </Box>
              <IconButton
                size="small"
                onClick={(e) => {
                  e.stopPropagation();
                  toggleFunc(f.id);
                }}
              >
                {open ? <ExpandLess /> : <ExpandMore />}
              </IconButton>
            </Box>

            <Collapse in={open} unmountOnExit>
              <Divider sx={{ mb: 1 }} />
              {!compactMode && (
                <Box sx={{ px: 1.25 }}>
                  <BlackHeader
                    left="Category Name"
                    right="Category Language"
                  />
                </Box>
              )}
              <Box sx={{ p: 1.25, pt: 0.5 }}>
                {f.cats.map(cat => (
                  <CategoryRow key={cat.id} fId={f.id} cat={cat} />
                ))}
              </Box>
            </Collapse>
          </Paper>
        );
      })}
    </Box>
  );
}
