// Normalize headers/rows from the API into a consistent camelCase shape
const pick = (o, keys) => keys.find(k => o[k] !== undefined) ? o[keys.find(k => o[k] !== undefined)] : undefined;

export function normalizeHeaders(headers = []) {
  return headers.map(h => ({
    orgID:                  pick(h, ['orgID','OrgID']),
    orgName:                pick(h, ['orgName','OrgName']),
    functionID:             pick(h, ['functionID','FunctionID']),
    functionName:           pick(h, ['functionName','FunctionName']),
    functionLanguage:       pick(h, ['functionLanguage','FunctionLanguage']),
    categoryID:             pick(h, ['categoryID','CategoryID']),
    categoryName:           pick(h, ['categoryName','CategoryName']),
    categoryLanguage:       pick(h, ['categoryLanguage','CategoryLanguage']),
    csF2SubcategoryID:      pick(h, ['csF2SubcategoryID','CSF2SubcategoryID','csf2SubcategoryID','CSF2SubcategoryId','csf2SubcategoryId']),
    csF2SubcategoryName:    pick(h, ['csF2SubcategoryName','CSF2SubcategoryName']),
    csF2SubcategoryLanguage:pick(h, ['csF2SubcategoryLanguage','CSF2SubcategoryLanguage']),
    changeSummary:          pick(h, ['changeSummary','ChangeSummary']),
    implementationExamples: pick(h, ['implementationExamples','ImplementationExamples']),
    owner:                  pick(h, ['owner','Owner']),
    custodian:              pick(h, ['custodian','Custodian']),
    keptCount:              pick(h, ['keptCount','KeptCount']) ?? 0,
    removedCount:           pick(h, ['removedCount','RemovedCount']) ?? 0,
    customCount:            pick(h, ['customCount','CustomCount']) ?? 0,
  }));
}

export function normalizeRows(rows = []) {
  return rows.map(r => ({
    orgID:                  pick(r, ['orgID','OrgID']),
    orgName:                pick(r, ['orgName','OrgName']),
    functionID:             pick(r, ['functionID','FunctionID']),
    functionName:           pick(r, ['functionName','FunctionName']),
    functionLanguage:       pick(r, ['functionLanguage','FunctionLanguage']),
    categoryID:             pick(r, ['categoryID','CategoryID']),
    categoryName:           pick(r, ['categoryName','CategoryName']),
    categoryLanguage:       pick(r, ['categoryLanguage','CategoryLanguage']),
    csF2SubcategoryID:      pick(r, ['csF2SubcategoryID','CSF2SubcategoryID','csf2SubcategoryID','CSF2SubcategoryId','csf2SubcategoryId']),
    csF2SubcategoryName:    pick(r, ['csF2SubcategoryName','CSF2SubcategoryName']),
    csF2SubcategoryLanguage:pick(r, ['csF2SubcategoryLanguage','CSF2SubcategoryLanguage']),
    changeSummary:          pick(r, ['changeSummary','ChangeSummary']),
    implementationExamples: pick(r, ['implementationExamples','ImplementationExamples']),
    csF1SubcategoryID:      pick(r, ['csF1SubcategoryID','CSF1SubcategoryID']),
    csF1SubcategoryName:    pick(r, ['csF1SubcategoryName','CSF1SubcategoryName']),
    csF1SubcategoryLanguage:pick(r, ['csF1SubcategoryLanguage','CSF1SubcategoryLanguage']),
    ent_Subcat_Attr:        pick(r, ['ent_Subcat_Attr','Ent_Subcat_Attr']),
    maturityLevel:          pick(r, ['maturityLevel','MaturityLevel']),
    attributeNum:           pick(r, ['attributeNum','AttributeNum']),
    attributeDefinition:    pick(r, ['attributeDefinition','AttributeDefinition']),
    assessScore2024:        pick(r, ['assessScore2024','AssessScore2024']),
    selectionStatus:        pick(r, ['selectionStatus','SelectionStatus']),
    selectionAttestation:   pick(r, ['selectionAttestation','SelectionAttestation']),
    customAttributeNum:     pick(r, ['customAttributeNum','CustomAttributeNum']),
    customAttributeDefinition: pick(r, ['customAttributeDefinition','CustomAttributeDefinition']),
    customAttributeAttestation: pick(r, ['customAttributeAttestation','CustomAttributeAttestation']),
    owner:                  pick(r, ['owner','Owner','subcatOwner']),
    custodian:              pick(r, ['custodian','Custodian','subcatCustodian']),
    ent_Subcat_Attr_CSF2:   pick(r, ['ent_Subcat_Attr_CSF2','Ent_Subcat_Attr_CSF2']),
  }));
}
