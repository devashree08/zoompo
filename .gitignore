// Minimal ExcelJS + save helper used across the app.
// Works with Vite + React without extra config.
// npm i exceljs

import ExcelJS from 'exceljs';

/** Create an empty workbook with sane metadata. */
export function createWorkbook() {
  const wb = new ExcelJS.Workbook();
  wb.creator = 'Attribute Mapping';
  wb.created = new Date();
  wb.modified = new Date();
  return wb;
}

/** Auto-fit columns by header + data width (bounded). */
export function autoFitColumns(worksheet, { min = 8, max = 120 } = {}) {
  worksheet.columns.forEach((col) => {
    let colMax = (col.header ? String(col.header).length : 0);
    col.eachCell({ includeEmpty: true }, (cell) => {
      const v = cell.value == null ? '' : (typeof cell.value === 'object' ? String(cell.value?.text ?? '') : String(cell.value));
      if (v.length > colMax) colMax = v.length;
    });
    col.width = Math.min(max, Math.max(min, colMax + 2));
  });
}

/** Save workbook to .xlsx in browser (no FileSaver dependency needed). */
export async function saveWorkbook(workbook, filename = 'export.xlsx') {
  const buffer = await workbook.xlsx.writeBuffer(); // IMPORTANT: await
  const blob = new Blob([buffer], {
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
  });

  // Use an <a download> â€” reliable across browsers
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
}
