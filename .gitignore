import * as React from 'react';
import { Box, Typography } from '@mui/material';
import AttributeFilterBar from '../components/molecules/AttributeFilterBar';
import TwoPane from '../../../ui/layout/TwoPane';
import BusyOverlay from '../../../ui/feedback/BusyOverlay';
import CsfTree from '../components/organisms/CsfTree';
import HeaderInfoPanel from '../components/organisms/HeaderInfoPanel';
import { fetchAttributeFeed } from '../api/attributeApi';
import { exportRowsAsCsv } from '../../../ui/data/csvExport';

const initialFilters = {
  orgIds: [], functionIds: [], categoryIds: [], subcatIds: [],
  ownerNames: [], custodianNames: [], maturity: [], finalOnly: false, search: ''
};

export default function AttributeMappingPage() {
  const [filters, setFilters] = React.useState(initialFilters);
  const [loading, setLoading] = React.useState(false);
  const [headers, setHeaders] = React.useState([]); // Result A
  const [rows, setRows] = React.useState([]);       // Result B (Phase 4 uses this)
  const [selectedSubcatID, setSelectedSubcatID] = React.useState(null);

  const loadFeed = React.useCallback(async (withRows = false, subcatIDs = []) => {
    setLoading(true);
    try {
      const resp = await fetchAttributeFeed({
        orgIds: filters.orgIds,
        functionIds: filters.functionIds,
        categoryIds: filters.categoryIds,
        subcatIds: withRows ? (subcatIDs?.length ? subcatIDs : filters.subcatIds) : [],
        ownerNames: filters.ownerNames,
        custodianNames: filters.custodianNames,
        maturity: filters.maturity,
        finalOnly: filters.finalOnly,
        search: filters.search
      });
      setHeaders(resp.headers || []);
      setRows(resp.rows || []);
    } finally {
      setLoading(false);
    }
  }, [filters]);

  React.useEffect(() => { loadFeed(false); }, [loadFeed]);

  const handleSelectSubcat = async (id) => {
    setSelectedSubcatID(id);
    const nextSubcats = Array.from(new Set([id]));
    setFilters(f => ({ ...f, subcatIds: nextSubcats }));
    await loadFeed(true, nextSubcats);
  };

  const selectedHeader = React.useMemo(() => {
    if (!selectedSubcatID) return null;
    return headers.find(h => h.CSF2SubcategoryID === selectedSubcatID) || null;
  }, [headers, selectedSubcatID]);

  const ownerCsv = React.useMemo(() => {
    if (!selectedHeader) return '';
    const firstOrgId = filters.orgIds?.[0];
    const byOrg = headers.filter(h => h.CSF2SubcategoryID === selectedSubcatID && (!firstOrgId || h.OrgID === firstOrgId));
    return (byOrg[0]?.Owner) || selectedHeader.Owner || '';
  }, [headers, selectedHeader, selectedSubcatID, filters.orgIds]);

  const custCsv = React.useMemo(() => {
    if (!selectedHeader) return '';
    const firstOrgId = filters.orgIds?.[0];
    const byOrg = headers.filter(h => h.CSF2SubcategoryID === selectedSubcatID && (!firstOrgId || h.OrgID === firstOrgId));
    return (byOrg[0]?.Custodian) || selectedHeader.Custodian || '';
  }, [headers, selectedHeader, selectedSubcatID, filters.orgIds]);

  const handleExport = async () => {
    if (!rows?.length) return;
    exportRowsAsCsv(rows, 'csf-attribute-rows.csv');
  };

  return (
    <Box sx={{ px: { xs: 1, md: 2 }, pb: 3 }}>
      <AttributeFilterBar
        value={filters}
        onChange={(v) => { setFilters(v); setSelectedSubcatID(null); }}
        onExport={handleExport}
      />

      <TwoPane
        left={
          <>
            <Typography variant="subtitle2" color="text.secondary" sx={{ mb: 1 }}>
              CSF 2.0 Structure
            </Typography>
            <CsfTree
              headers={headers}
              onSelectSubcat={handleSelectSubcat}
              selectedSubcatID={selectedSubcatID}
            />
          </>
        }
        right={
          <>
            {selectedHeader ? (
              <HeaderInfoPanel
                header={selectedHeader}
                ownerCsv={ownerCsv}
                custodianCsv={custCsv}
              />
            ) : (
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                Select a subcategory from the left to view details.
              </Typography>
            )}

            {/* Phase 4 will render the attribute table + inline edits here */}
          </>
        }
      />

      <BusyOverlay open={loading} />
    </Box>
  );
}
