[HttpGet("apps/stream")]
public async Task<IActionResult> GetAllAppsStream(CancellationToken cancellationToken)
{
    Response.ContentType = "application/json";

    try
    {
        var connection = _context.Database.GetDbConnection();

        await connection.OpenAsync(cancellationToken);

        await using var command = connection.CreateCommand();
        command.CommandText = "dbo.StoredProc";
        command.CommandType = CommandType.StoredProcedure;

        await using var reader = await command.ExecuteReaderAsync(CommandBehavior.SequentialAccess, cancellationToken);

        var parser = SqlMapper.GetRowParser<AllAppsModel>(reader);

        await using var writer = new StreamWriter(Response.Body);
        await writer.WriteAsync("[");

        bool isFirst = true;

        while (await reader.ReadAsync(cancellationToken))
        {
            var item = parser(reader); // Dapper maps row to AllAppsModel

            if (!isFirst)
                await writer.WriteAsync(",");

            string json = JsonSerializer.Serialize(item);
            await writer.WriteAsync(json);
            await writer.FlushAsync(); // stream to client

            isFirst = false;
        }

        await writer.WriteAsync("]");
        await writer.FlushAsync();

        return new EmptyResult(); // response already written directly
    }
    catch (Exception ex)
    {
        // Log exception here (e.g., _logger.LogError(ex, "Streaming failed");)
        return StatusCode(500, new { message = "An error occurred while streaming data.", error = ex.Message });
    }
}
