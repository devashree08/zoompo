public sealed class SsoIdentityMiddleware(
    RequestDelegate next,
    ILogger<SsoIdentityMiddleware> logger,
    IOptions<HeaderIdentityOptions> options)
{
    private readonly RequestDelegate _next = next;
    private readonly ILogger<SsoIdentityMiddleware> _logger = logger;
    private readonly HeaderIdentityOptions _opts = options.Value;

    public async Task InvokeAsync(HttpContext context)
    {
        // Prefer Items set by SSO agent; fallback to headers
        string? GetItem(string key) =>
            context.Items.TryGetValue(key, out var v) && v is not null ? v.ToString()?.Trim() : null;

        string? GetHeader(string key) =>
            context.Request.Headers.TryGetValue(key, out var hv) ? hv.ToString().Trim() : null;

        var userName = GetItem(_opts.ItemUserNameKey) ?? GetHeader(_opts.HeaderUserName);
        var eid      = GetItem(_opts.ItemEidKey)      ?? GetHeader(_opts.HeaderEid);
        var first    = GetItem(_opts.ItemFirstNameKey)?? GetHeader(_opts.HeaderFirstName);
        var last     = GetItem(_opts.ItemLastNameKey) ?? GetHeader(_opts.HeaderLastName);
        var email    = GetItem(_opts.ItemEmailKey)    ?? GetHeader(_opts.HeaderEmail);

        if (string.IsNullOrWhiteSpace(userName) && string.IsNullOrWhiteSpace(eid))
        {
            await _next(context);
            return;
        }

        var claims = new List<Claim>(8);
        if (!string.IsNullOrWhiteSpace(userName)) claims.Add(new Claim(PortalClaimTypes.UserName, userName));
        if (!string.IsNullOrWhiteSpace(eid))      claims.Add(new Claim(PortalClaimTypes.EID, eid));
        if (!string.IsNullOrWhiteSpace(first))    claims.Add(new Claim(PortalClaimTypes.GivenName, first));
        if (!string.IsNullOrWhiteSpace(last))     claims.Add(new Claim(PortalClaimTypes.Surname, last));
        if (!string.IsNullOrWhiteSpace(email))    claims.Add(new Claim(PortalClaimTypes.Email, email));

        var identity  = new ClaimsIdentity(claims, authenticationType: "PortalSso");
        var principal = new ClaimsPrincipal(identity);

        // ⬇️ Resolve the scoped service PER REQUEST (fix for the root-scope error)
        var policyService = context.RequestServices.GetRequiredService<IPortalPolicyService>();
        var policyNames = await policyService.GetPoliciesAsync(eid, userName, context.RequestAborted);

        foreach (var pn in policyNames)
        {
            if (!string.IsNullOrWhiteSpace(pn))
                identity.AddClaim(new Claim(PortalClaimTypes.Policy, pn));
        }

        context.User = principal;

        // keep logs minimal; we’ll tune later
        // _logger.LogDebug("User {User}/{EID} policies: {Policies}", userName, eid, string.Join(",", policyNames));

        await _next(context);
    }
