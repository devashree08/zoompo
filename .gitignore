import * as React from 'react';
import { Box, Chip, Stack } from '@mui/material';
import { toLabelMap } from '../../utils/filters';

export default function SelectedChipsBar({
  value,         // { orgIds, functionIds, categoryIds, subcatIds, ownerNames, custodianNames, maturity }
  options,       // { orgs, functions, categories, subcategories, owners, custodians }
  onChange,
}) {
  const maps = {
    orgs:          toLabelMap(options.orgs),
    functions:     toLabelMap(options.functions),
    categories:    toLabelMap(options.categories),
    subcategories: toLabelMap(options.subcategories),
    owners:        toLabelMap(options.owners),
    custodians:    toLabelMap(options.custodians),
    maturity:      new Map([[3, 'Level 3'], [4, 'Level 4']]),
  };

  const makeChips = (arr, key, labelMap) =>
    (arr || []).map(v => ({
      key: `${key}:${v}`,
      label: labelMap.get(v) ?? String(v),
      onDelete: () => onChange({ ...value, [key]: (value[key] || []).filter(x => x !== v) })
    }));

  const chips = [
    ...makeChips(value.orgIds, 'orgIds', maps.orgs),
    ...makeChips(value.functionIds, 'functionIds', maps.functions),
    ...makeChips(value.categoryIds, 'categoryIds', maps.categories),
    ...makeChips(value.subcatIds, 'subcatIds', maps.subcategories),
    ...makeChips(value.ownerNames, 'ownerNames', maps.owners),
    ...makeChips(value.custodianNames, 'custodianNames', maps.custodians),
    ...makeChips(value.maturity, 'maturity', maps.maturity),
  ];

  if (!chips.length) return null;

  return (
    <Box sx={{ mt: 1 }}>
      <Stack direction="row" spacing={1} useFlexGap flexWrap="wrap">
        {chips.map(c => (
          <Chip key={c.key} label={c.label} onDelete={c.onDelete} size="small" />
        ))}
      </Stack>
    </Box>
  );
}
