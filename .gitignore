using System;
using System.Collections.Generic;

namespace YourApp.Namespace.Models
{
    // ---------- Feed: result set A (headers / accordion) ----------
    public sealed class CsfFeedHeader
    {
        public int OrgID { get; set; }
        public string OrgName { get; set; } = "";
        public int FunctionID { get; set; }
        public string FunctionName { get; set; } = "";
        public string? FunctionLanguage { get; set; }
        public int CategoryID { get; set; }
        public string CategoryName { get; set; } = "";
        public string? CategoryLanguage { get; set; }
        public int CSF2SubcategoryID { get; set; }
        public string CSF2SubcategoryName { get; set; } = "";
        public string? CSF2SubcategoryLanguage { get; set; }
        public string? ChangeSummary { get; set; }
        public string? ImplementationExamples { get; set; }
        public string? Owner { get; set; }         // CSV of names (per Org Ã— Subcat)
        public string? Custodian { get; set; }     // CSV of names
        public int KeptCount { get; set; }
        public int RemovedCount { get; set; }
        public int CustomCount { get; set; }
    }

    // ---------- Feed: result set B (attribute rows) ----------
    public sealed class CsfFeedRow
    {
        public int OrgID { get; set; }
        public string OrgName { get; set; } = "";

        public int FunctionID { get; set; }
        public string FunctionName { get; set; } = "";
        public string? FunctionLanguage { get; set; }

        public int CategoryID { get; set; }
        public string CategoryName { get; set; } = "";
        public string? CategoryLanguage { get; set; }

        public int CSF2SubcategoryID { get; set; }
        public string CSF2SubcategoryName { get; set; } = "";
        public string? CSF2SubcategoryLanguage { get; set; }
        public string? ChangeSummary { get; set; }
        public string? ImplementationExamples { get; set; }

        public int CSF1SubcategoryID { get; set; }   // 0 for customs
        public string? CSF1SubcategoryName { get; set; }
        public string? CSF1SubcategoryLanguage { get; set; }

        public string? Ent_Subcat_Attr { get; set; } // CSF 1.1 key when baseline row
        public byte MaturityLevel { get; set; }      // 3 or 4
        public int AttributeNum { get; set; }        // baseline ATTR # or custom #
        public string? AttributeDefinition { get; set; } // baseline text when baseline row
        public int? AssessScore2024 { get; set; }

        public string? SelectionStatus { get; set; }       // Keep/Remove (baseline rows)
        public string? SelectionAttestation { get; set; }  // Meet/Partial Meet/Does Not Meet

        public int?    CustomAttributeNum { get; set; }          // present for customs
        public string? CustomAttributeDefinition { get; set; }   // present for customs
        public string? CustomAttributeAttestation { get; set; }  // present for customs

        public string? Owner { get; set; }       // CSV
        public string? Custodian { get; set; }   // CSV

        public string? Ent_Subcat_Attr_CSF2 { get; set; } // future finalization key (Phase 8)
    }

    // ---------- Filters payload ----------
    public sealed class OrgLookup
    {
        public int OrgID { get; set; }
        public string OrgCode { get; set; } = "";
        public string OrgName { get; set; } = "";
    }
    public sealed class FunctionLookup
    {
        public int FunctionID { get; set; }
        public string FunctionName { get; set; } = "";
    }
    public sealed class CategoryLookup
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; } = "";
        public int FunctionID { get; set; }
    }
    public sealed class SubcategoryLookup
    {
        public int SubcategoryID { get; set; }
        public string SubcategoryName { get; set; } = "";
        public int CategoryID { get; set; }
    }
    public sealed class ContactLookup
    {
        public int OrgID { get; set; }
        public int CSF2SubcategoryID { get; set; }
        public string FullName { get; set; } = "";
    }

    // ---------- API DTOs (requests/responses) ----------
    public sealed class FeedQuery
    {
        // CSV multi-selects; send "" or null for "all"
        public string? OrgIds { get; set; }
        public string? FunctionIds { get; set; }
        public string? CategoryIds { get; set; }
        public string? Csf2SubcatIds { get; set; }
        public string? OwnerNames { get; set; }
        public string? CustodianNames { get; set; }
        public bool FinalOnly { get; set; } = false;
    }

    public sealed class CsfFeedResponse
    {
        public List<CsfFeedHeader> Headers { get; set; } = new();
        public List<CsfFeedRow> Rows { get; set; } = new();
    }

    public sealed class SaveSelectionRequest
    {
        public int OrgId { get; set; }
        public int Csf2SubcategoryId { get; set; }
        public int Csf1SubcategoryId { get; set; }
        public byte MaturityLevel { get; set; }     // 3 or 4
        public int AttributeNum { get; set; }
        public string? SelectionStatus { get; set; }      // Keep | Remove | null
        public string? SelectionAttestation { get; set; } // Meet | Partial Meet | Does Not Meet | null
    }

    public sealed class SaveCustomRequest
    {
        public string Action { get; set; } = ""; // ADD | UPDATE | DELETE
        public int OrgId { get; set; }
        public int Csf2SubcategoryId { get; set; }
        public byte MaturityLevel { get; set; } // 3 or 4
        public int? AttributeNum { get; set; }  // required for UPDATE/DELETE, output for ADD
        public string? Definition { get; set; } // required for ADD
        public string? Attestation { get; set; } // ADD/UPDATE
    }

    public sealed class FilterQuery
    {
        public string? OrgIds { get; set; }
        public string? FunctionIds { get; set; }
        public string? CategoryIds { get; set; }
        public string? SubcategoryIds { get; set; }
        public string? OwnerNames { get; set; }
        public string? CustodianNames { get; set; }
    }

    public sealed class FiltersResponse
    {
        public List<OrgLookup> Orgs { get; set; } = new();
        public List<FunctionLookup> Functions { get; set; } = new();
        public List<CategoryLookup> Categories { get; set; } = new();
        public List<SubcategoryLookup> Subcategories { get; set; } = new();
        public List<ContactLookup> Owners { get; set; } = new();
        public List<ContactLookup> Custodians { get; set; } = new();

        // enums can be hard-coded here for UI convenience
        public List<byte> MaturityLevels { get; set; } = new() { 3, 4 };
        public List<string> Statuses { get; set; } = new() { "Keep", "Remove" };
        public List<string> Attestations { get; set; } = new() { "Meet", "Partial Meet", "Does Not Meet" };
    }

    // ---------- Small helpers ----------
    public static class Csv
    {
        public static string? Join(IEnumerable<int>? items) =>
            items == null ? null : string.Join(",", items);
        public static string? Join(IEnumerable<string>? items) =>
            items == null ? null : string.Join(",", items);
    }
}











-----------

using System;
using System.Data;
using System.Threading.Tasks;
using System.Collections.Generic;
using Dapper;
using Microsoft.AspNetCore.Mvc;
using YourApp.Namespace.Models;

namespace YourApp.Namespace.Controllers
{
    [Route("api/va/[controller]")]
    [ApiController]
    public class CSFAttributeMapController : ControllerBase
    {
        private readonly CSFMappingDbContext _db;

        public CSFAttributeMapController(CSFMappingDbContext dbContext)
        {
            _db = dbContext;
        }

        private string GetUserId() =>
            HttpContext?.Request?.Headers["X-User-Id"].ToString()
            ?? User?.Identity?.Name
            ?? "unknown";

        // ----------------- GET: Feed (headers + rows) -----------------
        [HttpGet("feed")]
        public async Task<IActionResult> GetFeed([FromQuery] FeedQuery q)
        {
            try
            {
                await using var conn = _db.Database.GetDbConnection();
                if (conn.State != ConnectionState.Open) await conn.OpenAsync();

                var p = new DynamicParameters();
                p.Add("@OrgIDsCsv",         string.IsNullOrWhiteSpace(q.OrgIds) ? null : q.OrgIds);
                p.Add("@FunctionIDsCsv",    string.IsNullOrWhiteSpace(q.FunctionIds) ? null : q.FunctionIds);
                p.Add("@CategoryIDsCsv",    string.IsNullOrWhiteSpace(q.CategoryIds) ? null : q.CategoryIds);
                p.Add("@CSF2SubcatIDsCsv",  string.IsNullOrWhiteSpace(q.Csf2SubcatIds) ? null : q.Csf2SubcatIds);
                p.Add("@OwnerNamesCsv",     string.IsNullOrWhiteSpace(q.OwnerNames) ? null : q.OwnerNames);
                p.Add("@CustodianNamesCsv", string.IsNullOrWhiteSpace(q.CustodianNames) ? null : q.CustodianNames);
                p.Add("@FinalOnly",         q.FinalOnly, DbType.Boolean);

                using var multi = await conn.QueryMultipleAsync(
                    "dbo.sp_GetCsfAttributeFeed", p, commandType: CommandType.StoredProcedure);

                var headers = (await multi.ReadAsync<CsfFeedHeader>()).AsList();
                var rows    = (await multi.ReadAsync<CsfFeedRow>()).AsList();

                return Ok(new CsfFeedResponse { Headers = headers, Rows = rows });
            }
            catch (Exception ex)
            {
                // map SQL errors to 400 if needed; keep simple here
                return Problem(ex.Message);
            }
        }

        // ----------------- GET: Filter lookups (cross-filtered, CSV) -----------------
        [HttpGet("filters")]
        public async Task<IActionResult> GetFilters([FromQuery] FilterQuery q)
        {
            try
            {
                await using var conn = _db.Database.GetDbConnection();
                if (conn.State != ConnectionState.Open) await conn.OpenAsync();

                var p = new DynamicParameters();
                p.Add("@OrgIDsCsv",            string.IsNullOrWhiteSpace(q.OrgIds) ? null : q.OrgIds);
                p.Add("@FunctionIDsCsv",       string.IsNullOrWhiteSpace(q.FunctionIds) ? null : q.FunctionIds);
                p.Add("@CategoryIDsCsv",       string.IsNullOrWhiteSpace(q.CategoryIds) ? null : q.CategoryIds);
                p.Add("@SubcategoryIDsCsv",    string.IsNullOrWhiteSpace(q.SubcategoryIds) ? null : q.SubcategoryIds);
                p.Add("@OwnerNamesCsv",        string.IsNullOrWhiteSpace(q.OwnerNames) ? null : q.OwnerNames);
                p.Add("@CustodianNamesCsv",    string.IsNullOrWhiteSpace(q.CustodianNames) ? null : q.CustodianNames);

                using var multi = await conn.QueryMultipleAsync(
                    "dbo.sp_GetCsfFilterLookups", p, commandType: CommandType.StoredProcedure);

                var resp = new FiltersResponse
                {
                    Orgs          = (await multi.ReadAsync<OrgLookup>()).AsList(),
                    Functions     = (await multi.ReadAsync<FunctionLookup>()).AsList(),
                    Categories    = (await multi.ReadAsync<CategoryLookup>()).AsList(),
                    Subcategories = (await multi.ReadAsync<SubcategoryLookup>()).AsList(),
                    Owners        = (await multi.ReadAsync<ContactLookup>()).AsList(),
                    Custodians    = (await multi.ReadAsync<ContactLookup>()).AsList()
                };

                // enums are already pre-populated in FiltersResponse ctor; override here if you want to
                return Ok(resp);
            }
            catch (Exception ex)
            {
                return Problem(ex.Message);
            }
        }

        // ----------------- POST: Save selection (Keep/Remove + Attestation) -----------------
        [HttpPost("selection")]
        public async Task<IActionResult> SaveSelection([FromBody] SaveSelectionRequest r)
        {
            var userId = GetUserId();
            try
            {
                await using var conn = _db.Database.GetDbConnection();
                if (conn.State != ConnectionState.Open) await conn.OpenAsync();

                var p = new DynamicParameters();
                p.Add("@OrgID",              r.OrgId);
                p.Add("@CSF2SubcategoryID",  r.Csf2SubcategoryId);
                p.Add("@CSF1SubcategoryID",  r.Csf1SubcategoryId);
                p.Add("@MaturityLevel",      r.MaturityLevel);
                p.Add("@AttributeNum",       r.AttributeNum);
                p.Add("@SelectionStatus",    r.SelectionStatus);
                p.Add("@SelectionAttestation", r.SelectionAttestation);
                p.Add("@UserID",             userId);

                await conn.ExecuteAsync("dbo.sp_SaveAttributeSelection", p, commandType: CommandType.StoredProcedure);

                // 204 is fine; the client will re-GET the current subcat slice
                return NoContent();
            }
            catch (Exception ex)
            {
                return Problem(ex.Message);
            }
        }

        // ----------------- POST: Save custom attribute (ADD/UPDATE/DELETE) -----------------
        [HttpPost("custom")]
        public async Task<IActionResult> SaveCustom([FromBody] SaveCustomRequest r)
        {
            var userId = GetUserId();
            try
            {
                await using var conn = _db.Database.GetDbConnection();
                if (conn.State != ConnectionState.Open) await conn.OpenAsync();

                var p = new DynamicParameters();
                p.Add("@Action",              r.Action);
                p.Add("@OrgID",               r.OrgId);
                p.Add("@CSF2SubcategoryID",   r.Csf2SubcategoryId);
                p.Add("@MaturityLevel",       r.MaturityLevel);
                p.Add("@AttributeNum",        r.AttributeNum, direction: ParameterDirection.InputOutput);
                p.Add("@Definition",          r.Definition);
                p.Add("@Attestation",         r.Attestation);
                p.Add("@UserID",              userId);

                await conn.ExecuteAsync("dbo.sp_SaveCustomAttribute", p, commandType: CommandType.StoredProcedure);

                var assigned = p.Get<int?>("@AttributeNum");
                return Ok(new { attributeNum = assigned });
            }
            catch (Exception ex)
            {
                return Problem(ex.Message);
            }
        }
    }
}




