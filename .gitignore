// src/ui/core/MultiSelectSearch.jsx
import * as React from 'react';
import { Autocomplete, TextField, Checkbox } from '@mui/material';

export default function MultiSelectSearch({
  label,
  value = [],               // array of primitive values
  options = [],             // [{ value, label }]
  onChange,
  placeholder = 'Selectâ€¦',
  disabled = false,
  limitTags = 2,            // compact but readable
  ...props
}) {
  // Map value (primitives) -> option objects for Autocomplete
  const valueObjects = React.useMemo(() => {
    const byValue = new Map(options.map(o => [o.value, o]));
    return value.map(v => byValue.get(v)).filter(Boolean);
  }, [value, options]);

  const handleChange = (_, selectedOptions) => {
    onChange?.(selectedOptions.map(o => o.value));
  };

  const renderTags = (selected, getTagProps) => {
    if (!selected?.length) return null;
    if (selected.length > 2) {
      return <span {...getTagProps({ index: 0 })}>{selected.length} selected</span>;
    }
    return selected.map((opt, i) => (
      <span key={opt.value} {...getTagProps({ index: i })}>{opt.label}</span>
    ));
  };

  return (
    <Autocomplete
      multiple
      disableCloseOnSelect
      options={options}
      value={valueObjects}
      onChange={handleChange}
      getOptionLabel={(o) => o?.label ?? ''}
      isOptionEqualToValue={(o, v) => o.value === v.value}
      // Keep selected options visible so the menu never looks empty
      filterSelectedOptions={false}
      renderOption={(props2, option, { selected }) => (
        <li {...props2}>
          <Checkbox checked={selected} sx={{ mr: 1 }} />
          {option.label}
        </li>
      )}
      renderTags={renderTags}
      limitTags={limitTags}
      ListboxProps={{ style: { maxHeight: 360 } }}
      fullWidth
      disabled={disabled}
      renderInput={(params) => (
        <TextField {...params} size="small" label={label} placeholder={placeholder} />
      )}
      {...props}
    />
  );
}
