import * as React from 'react';
import {
  Box, Grid, Paper, Typography, Chip, Button, IconButton,
  Dialog, DialogTitle, DialogContent, DialogActions, Collapse, Stack, Divider
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon  from '@mui/icons-material/ExpandLess';
import OpenInNewIcon   from '@mui/icons-material/OpenInNew';

function splitCsv(csv) {
  return (csv || '')
    .split(',')
    .map(s => s.trim())
    .filter(Boolean);
}

function Card({ title, children, sx }) {
  return (
    <Paper variant="outlined" sx={{ p: 2, borderRadius: 2, ...sx }}>
      <Typography variant="overline" sx={{ letterSpacing: 1, color: 'text.secondary' }}>
        {title}
      </Typography>
      {children}
    </Paper>
  );
}

function TitleAndText({ title, text }) {
  return (
    <Box>
      <Typography variant="h6" sx={{ fontWeight: 800, mb: 0.5 }}>{title}</Typography>
      <Typography variant="body1" color="text.secondary">{text}</Typography>
    </Box>
  );
}

function ExpandableText({ title, text, maxLines = 3 }) {
  const [open, setOpen] = React.useState(false);
  const [dialogOpen, setDialogOpen] = React.useState(false);
  if (!text) return (
    <Card title={title}>
      <Typography variant="body2" color="text.disabled">No information.</Typography>
    </Card>
  );

  return (
    <Card title={title}>
      <Box
        sx={{
          position: 'relative',
          ...(open
            ? {}
            : {
                display: '-webkit-box',
                WebkitLineClamp: maxLines,
                WebkitBoxOrient: 'vertical',
                overflow: 'hidden'
              })
        }}
      >
        <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
          {text}
        </Typography>
      </Box>

      <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
        <Button variant="text" size="small" onClick={() => setOpen(v => !v)}>
          {open ? 'Show less' : 'Show more'}
        </Button>
        <Button
          variant="text"
          size="small"
          endIcon={<OpenInNewIcon fontSize="small" />}
          onClick={() => setDialogOpen(true)}
        >
          Open dialog
        </Button>
      </Stack>

      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} fullWidth maxWidth="md">
        <DialogTitle>{title}</DialogTitle>
        <DialogContent dividers>
          <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
            {text}
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    </Card>
  );
}

function AssociatedCsf11Panel({ rows }) {
  // Unique 1.1 subcats
  const assoc = React.useMemo(() => {
    const m = new Map();
    (rows || [])
      .filter(r => r.csF1SubcategoryID && Number(r.csF1SubcategoryID) !== 0)
      .forEach(r => {
        if (!m.has(r.csF1SubcategoryID)) {
          m.set(r.csF1SubcategoryID, {
            id: r.csF1SubcategoryID,
            name: r.csF1SubcategoryName,
            lang: r.csF1SubcategoryLanguage
          });
        }
      });
    return Array.from(m.values());
  }, [rows]);

  return (
    <Card title="ASSOCIATED 1.1 SUBCATEGORIES">
      {assoc.length === 0 ? (
        <Typography variant="body2" color="text.disabled">None.</Typography>
      ) : (
        <Box component="ul" sx={{ pl: 3, m: 0 }}>
          {assoc.map(a => (
            <li key={a.id}>
              <Typography variant="h6" sx={{ fontWeight: 800, mb: 0.25 }}>{a.name}</Typography>
              <Typography variant="body1" color="text.secondary">{a.lang}</Typography>
            </li>
          ))}
        </Box>
      )}
    </Card>
  );
}

export default function RightHeaderComposite({
  header,              // normalized header for the selected subcat + (active) org
  associatedRows,      // all rows for this CSF2 subcat (across orgs)
  ownerCsv,            // owner string for active org tab
  custodianCsv         // custodian string for active org tab
}) {
  const [collapsed, setCollapsed] = React.useState(false);

  if (!header) return null;

  const owners = splitCsv(ownerCsv);
  const custodians = splitCsv(custodianCsv);

  return (
    <Box>
      {/* Collapsed summary bar */}
      <Paper variant="outlined" sx={{ p: 1, borderRadius: 2, mb: 1, display: 'flex', alignItems: 'center' }}>
        <Typography variant="subtitle1" sx={{ fontWeight: 800 }}>
          {header.csF2SubcategoryName}
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
          {header.csF2SubcategoryLanguage}
        </Typography>
        <Box sx={{ ml: 'auto' }}>
          <IconButton size="small" onClick={() => setCollapsed(c => !c)} aria-label="toggle header">
            {collapsed ? <ExpandMoreIcon/> : <ExpandLessIcon/>}
          </IconButton>
        </Box>
      </Paper>

      <Collapse in={!collapsed}>
        <Grid container spacing={2}>
          {/* LEFT GRID (function/category/csf2 + texts) */}
          <Grid item xs={12} md={9}>
            <Grid container spacing={2}>
              <Grid item xs={12} md={4}>
                <Card title="FUNCTION">
                  <TitleAndText title={header.functionName} text={header.functionLanguage} />
                </Card>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card title="CATEGORY">
                  <TitleAndText title={header.categoryName} text={header.categoryLanguage} />
                </Card>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card title="CSF 2.0 SUBCATEGORY">
                  <TitleAndText title={header.csF2SubcategoryName} text={header.csF2SubcategoryLanguage} />
                  {(owners.length > 0 || custodians.length > 0) && (
                    <>
                      <Divider sx={{ my: 1.25 }} />
                      <Typography variant="overline" sx={{ color: 'text.secondary' }}>
                        OWNER / CUSTODIAN
                      </Typography>
                      <Stack direction="row" spacing={1} flexWrap="wrap" useFlexGap sx={{ mt: 0.5 }}>
                        {owners.map((n, i) => <Chip key={`o-${i}`} label={`Owner: ${n}`} size="small" />)}
                        {custodians.map((n, i) => <Chip key={`c-${i}`} label={`Custodian: ${n}`} size="small" />)}
                      </Stack>
                    </>
                  )}
                </Card>
              </Grid>

              <Grid item xs={12} md={6}>
                <ExpandableText title="CHANGE SUMMARY" text={header.changeSummary} />
              </Grid>
              <Grid item xs={12} md={6}>
                <ExpandableText title="IMPLEMENTATION EXAMPLES" text={header.implementationExamples} />
              </Grid>
            </Grid>
          </Grid>

          {/* RIGHT GRID (associated 1.1) */}
          <Grid item xs={12} md={3}>
            <AssociatedCsf11Panel rows={associatedRows} />
          </Grid>
        </Grid>
      </Collapse>
    </Box>
  );
}
