CREATE OR ALTER PROCEDURE dbo.spUpsertReadinessFact
  @OrgID               INT,
  @SubcategoryID       INT,

  -- Editable fields (NULL means "leave as-is" on UPDATE)
  @SubcatOwner         NVARCHAR(MAX)   = NULL,
  @SubcatCustodian     NVARCHAR(MAX)   = NULL,
  @Scope               NVARCHAR(10)    = NULL,  -- Yes / No (varchar)
  @MaturityProjection  NVARCHAR(20)    = NULL,  -- Increase / Decrease / Maintain
  @ProfileType         NVARCHAR(20)    = NULL,  -- Provider / Consumer / Inheritor

  -- Future use (keep commented for now)
  -- @ConsumingFromOrg    NVARCHAR(50)    = NULL,  -- which OrgAbbr are they consuming from (if Consumer)
  -- @Department          NVARCHAR(200)   = NULL,  -- optional department detail

  -- Audit
  @LastUpdatedBy       NVARCHAR(100)   -- pass userID from middleware header
AS
BEGIN
  SET NOCOUNT ON;

  BEGIN TRY
    /* ================= Normalize & Validate ================= */
    DECLARE
      @ScopeNorm              NVARCHAR(10),
      @MaturityProjectionNorm NVARCHAR(20),
      @ProfileTypeNorm        NVARCHAR(20);

    -- Scope: Yes/No (accept common variants; store canonical)
    IF @Scope IS NULL
      SET @ScopeNorm = NULL;
    ELSE
      SET @ScopeNorm =
        CASE UPPER(LTRIM(RTRIM(@Scope)))
          WHEN 'YES' THEN 'Yes'
          WHEN 'Y'   THEN 'Yes'
          WHEN 'TRUE' THEN 'Yes'
          WHEN '1'   THEN 'Yes'
          WHEN 'NO'  THEN 'No'
          WHEN 'N'   THEN 'No'
          WHEN 'FALSE' THEN 'No'
          WHEN '0'   THEN 'No'
          ELSE NULL
        END;

    IF @Scope IS NOT NULL AND @ScopeNorm IS NULL
      THROW 50001, 'Invalid Scope. Allowed: Yes/No.', 1;

    -- MaturityProjection: Increase/Decrease/Maintain
    IF @MaturityProjection IS NULL
      SET @MaturityProjectionNorm = NULL;
    ELSE
      SET @MaturityProjectionNorm =
        CASE UPPER(LTRIM(RTRIM(@MaturityProjection)))
          WHEN 'INCREASE'  THEN 'Increase'
          WHEN 'DECREASE'  THEN 'Decrease'
          WHEN 'MAINTAIN'  THEN 'Maintain'
          ELSE NULL
        END;

    IF @MaturityProjection IS NOT NULL AND @MaturityProjectionNorm IS NULL
      THROW 50002, 'Invalid MaturityProjection. Allowed: Increase/Decrease/Maintain.', 1;

    -- ProfileType: Provider/Consumer/Inheritor
    IF @ProfileType IS NULL
      SET @ProfileTypeNorm = NULL;
    ELSE
      SET @ProfileTypeNorm =
        CASE UPPER(LTRIM(RTRIM(@ProfileType)))
          WHEN 'PROVIDER'   THEN 'Provider'
          WHEN 'CONSUMER'   THEN 'Consumer'
          WHEN 'INHERITOR'  THEN 'Inheritor'
          ELSE NULL
        END;

    IF @ProfileType IS NOT NULL AND @ProfileTypeNorm IS NULL
      THROW 50003, 'Invalid ProfileType. Allowed: Provider/Consumer/Inheritor.', 1;

    /* Simple cosmetic normalization of owner/custodian strings */
    DECLARE
      @OwnerNorm NVARCHAR(MAX) =
        CASE WHEN @SubcatOwner IS NULL THEN NULL
             ELSE LTRIM(RTRIM(REPLACE(REPLACE(@SubcatOwner, ' ,', ','), ', ', ', ')))
        END,
      @CustNorm NVARCHAR(MAX) =
        CASE WHEN @SubcatCustodian IS NULL THEN NULL
             ELSE LTRIM(RTRIM(REPLACE(REPLACE(@SubcatCustodian, ' ,', ','), ', ', ', ')))
        END;

    /* ================= Authorization (future) =================
       -- Example skeleton:
       -- IF NOT EXISTS (
       --   SELECT 1
       --   FROM dbo.UserOrgPermission p
       --   WHERE p.UserID = @LastUpdatedBy
       --     AND (p.IsAdmin = 1 OR (p.OrgID = @OrgID AND p.CanEdit = 1))
       -- )
       --   THROW 50010, 'You are not authorized to modify this Org.', 1;
    */

    /* ================= Upsert ================= */
    BEGIN TRAN;

    -- Lock target key to prevent race-y inserts
    IF EXISTS (
      SELECT 1
      FROM dbo.ReadinessFact WITH (UPDLOCK, HOLDLOCK)
      WHERE OrgID = @OrgID AND SubcategoryID = @SubcategoryID
    )
    BEGIN
      UPDATE rf
      SET
        rf.SubcatOwner        = COALESCE(@OwnerNorm, rf.SubcatOwner),
        rf.SubcatCustodian    = COALESCE(@CustNorm, rf.SubcatCustodian),
        rf.Scope              = COALESCE(@ScopeNorm, rf.Scope),
        rf.MaturityProjection = COALESCE(@MaturityProjectionNorm, rf.MaturityProjection),
        rf.ProfileType        = COALESCE(@ProfileTypeNorm, rf.ProfileType),
        -- rf.ConsumingFromOrg   = COALESCE(@ConsumingFromOrg, rf.ConsumingFromOrg), -- future
        -- rf.Department         = COALESCE(@Department, rf.Department),             -- future
        rf.LastUpdatedBy      = @LastUpdatedBy,
        rf.LastUpdatedDate    = GETDATE()
      FROM dbo.ReadinessFact rf
      WHERE rf.OrgID = @OrgID AND rf.SubcategoryID = @SubcategoryID;
    END
    ELSE
    BEGIN
      -- Insert minimal row plus whatever values are provided.
      INSERT INTO dbo.ReadinessFact (
        OrgID,
        SubcategoryID,
        SubcatOwner,
        SubcatCustodian,
        Scope,
        MaturityProjection,
        ProfileType,
        -- ConsumingFromOrg,  -- future
        -- Department,        -- future
        LastUpdatedBy,
        LastUpdatedDate
      )
      VALUES (
        @OrgID,
        @SubcategoryID,
        @OwnerNorm,
        @CustNorm,
        @ScopeNorm,
        @MaturityProjectionNorm,
        @ProfileTypeNorm,
        -- @ConsumingFromOrg,  -- future
        -- @Department,        -- future
        @LastUpdatedBy,
        GETDATE()
      );
    END

    COMMIT TRAN;

    /* ================= Return the final row ================= */
    SELECT
      rf.OrgID,
      rf.SubcategoryID,
      rf.SubcatOwner,
      rf.SubcatCustodian,
      rf.Scope,
      rf.MaturityProjection,
      rf.ProfileType,
      -- rf.ConsumingFromOrg,   -- future
      -- rf.Department,         -- future
      rf.LastUpdatedBy,
      rf.LastUpdatedDate
    FROM dbo.ReadinessFact rf
    WHERE rf.OrgID = @OrgID AND rf.SubcategoryID = @SubcategoryID;
  END TRY
  BEGIN CATCH
    IF XACT_STATE() <> 0 ROLLBACK TRAN;
    DECLARE @ErrMsg NVARCHAR(4000) = ERROR_MESSAGE(), @ErrNum INT = ERROR_NUMBER(), @ErrState INT = ERROR_STATE();
    RAISERROR('spUpsertReadinessFact failed (%d): %s', 16, 1, @ErrNum, @ErrMsg) WITH NOWAIT;
    RETURN;
  END CATCH
END
GO
