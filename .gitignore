// Extensions/SerilogExtensions.cs
using Serilog;
using Serilog.Events;
using Serilog.Formatting.Json;

namespace Gef.Portal.Extensions;

/// <summary>
/// Centralized Serilog bootstrapping (JSON file logs + daily rolling + retention).
/// Keeps Program.cs clean and uses appsettings for overrides.
/// </summary>
public static class SerilogExtensions
{
    /// <summary>
    /// Configure Serilog for the host using appsettings and a JSON file sink.
    /// Ensures the log directory exists (dev: .\Logs, IIS: D:\ProjectName\Logs unless overridden).
    /// Call this BEFORE builder.Build().
    /// </summary>
    public static void UsePortalSerilog(this WebApplicationBuilder builder)
    {
        var cfg = builder.Configuration;
        var env = builder.Environment;

        // Resolve log directory with sensible defaults per environment
        var defaultDir = env.IsDevelopment() ? ".\\Logs" : "D:\\ProjectName\\Logs";
        var dir = cfg["Logging:Directory"] ?? defaultDir;

        Directory.CreateDirectory(dir); // ensure folder exists

        builder.Host.UseSerilog((ctx, sp, lc) =>
        {
            // Read minimum levels; fall back to Information
            var minText = cfg["Logging:MinimumLevel"];
            var min = Enum.TryParse<LogEventLevel>(minText, true, out var parsed)
                ? parsed
                : LogEventLevel.Information;

            lc.MinimumLevel.Is(min)
              .MinimumLevel.Override("Microsoft", LogEventLevel.Warning)
              .MinimumLevel.Override("Microsoft.AspNetCore", LogEventLevel.Warning)
              .MinimumLevel.Override("System", LogEventLevel.Warning)
              .Enrich.FromLogContext()
              .Enrich.WithEnvironmentName()
              .Enrich.WithMachineName()
              .Enrich.WithProcessId()
              .Enrich.WithThreadId()
              .WriteTo.File(
                  formatter: new JsonFormatter(),
                  path: Path.Combine(dir, "log-.json"),
                  rollingInterval: RollingInterval.Day,
                  retainedFileCountLimit: 30,
                  fileSizeLimitBytes: 10_000_000,   // ~10 MB per file
                  rollOnFileSizeLimit: true,
                  shared: true                      // important for IIS
              );
        });
    }

    /// <summary>
    /// Adds request logging (status/latency) with smart level selection.
    /// Call this early in the pipeline (after exception handler).
    /// </summary>
    public static IApplicationBuilder UsePortalRequestLogging(this IApplicationBuilder app)
    {
        app.UseSerilogRequestLogging(opts =>
        {
            opts.GetLevel = (ctx, elapsed, ex) =>
                ex is null && ctx.Response.StatusCode < 500
                    ? LogEventLevel.Information
                    : LogEventLevel.Error;
        });
        return app;
    }
}
