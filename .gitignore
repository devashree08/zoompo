// pannel

// src/features/attributeMapping/components/organisms/AttributeGroupTable.jsx
import { useState, useEffect, useCallback, useMemo } from 'react';
import {
  Paper, Table, TableHead, TableBody, TableRow, TableCell,
  TableContainer, Select, MenuItem, Chip, CircularProgress, Tooltip,
  IconButton, TextField
} from '@mui/material';
import CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded';
import CancelRoundedIcon from '@mui/icons-material/CancelRounded';
import EditOutlinedIcon from '@mui/icons-material/EditOutlined';
import DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';
import SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';
import CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';
import { alpha } from '@mui/material/styles';

import { saveSelection } from '../../api/selectionApi';
import { saveCustomAttribute } from '../../api/customApi';
import useToast from '../../../../ui/feedback/useToast';

const STATUS_OPTIONS = ['Keep', 'Remove'];
const ATTEST_OPTIONS = ['Meet', 'Partially Meet', 'Does Not Meet'];

const deepChip = (theme, v) => {
  switch (v) {
    case 'Meet':
      return { bgcolor: theme.palette.success.main, color: theme.palette.common.white };
    case 'Partially Meet':
      return { bgcolor: theme.palette.warning.main, color: theme.palette.common.black };
    case 'Does Not Meet':
      return { bgcolor: theme.palette.error.main, color: theme.palette.common.white };
    default:
      return { bgcolor: theme.palette.grey[300], color: theme.palette.text.primary };
  }
};

const lightStatusChip = (theme, v) => {
  if (v === 'Keep') {
    return {
      bgcolor: theme.palette.success.light,
      color: theme.palette.success.dark,
      borderColor: alpha(theme.palette.success.main, 0.4),
    };
  }
  if (v === 'Remove') {
    return {
      bgcolor: theme.palette.error.light,
      color: theme.palette.error.dark,
      borderColor: alpha(theme.palette.error.main, 0.4),
    };
  }
  return { bgcolor: theme.palette.grey[200], color: theme.palette.text.primary, borderColor: theme.palette.grey[300] };
};

/** Stable, collision-safe keys (custom vs baseline) */
export const rowKey = (r) => {
  const org = String(r.orgID ?? '0');
  const sub = String(r.csF2SubcategoryID ?? '0');
  const ml  = String(r.maturityLevel ?? '0');
  const isCustom = !!(r.isCustom || r.customAttributeDefinition || r.customAttributeNum != null);

  if (isCustom) {
    // C = custom; keep `customAttributeNum` in the key
    return `${org}|${sub}|${ml}|C|0|${String(r.customAttributeNum ?? '0')}`;
  }
  // B = baseline; include 1.1 subcat + attributeNum
  const csf1 = String(r.csF1SubcategoryID ?? '0');
  return `${org}|${sub}|${ml}|B|${csf1}|${String(r.attributeNum ?? '0')}`;
};

export default function AttributeGroupTable({
  rows = [],
  onPatchRow,             // (key, patch) => void
  onDeleteRow,            // (key) => void    <-- used for custom delete
  maxHeight = 'calc(100vh - 420px)',
}) {
  const { success, error } = useToast();

  // Local mirror so table updates instantly (then parent props catch up)
  const [localRows, setLocalRows] = useState(rows);
  useEffect(() => setLocalRows(rows), [rows]);

  // per-row save state (baseline status/attestation)
  const [actionState, setActionState] = useState(new Map());
  const setStateFor = (k, v) => setActionState(prev => new Map(prev).set(k, v));

  const patchLocal = useCallback((key, patch) => {
    setLocalRows(prev => prev.map(r => (rowKey(r) === key ? { ...r, ...patch } : r)));
  }, []);

  /** Always patch local AND notify parent to keep everything in sync immediately */
  const optimisticPatch = useCallback((r, patch) => {
    const k = rowKey(r);
    patchLocal(k, patch);
    onPatchRow?.(k, patch);
  }, [onPatchRow, patchLocal]);

  const handleSaveBaseline = async (r, nextPatch) => {
    const k = rowKey(r);
    optimisticPatch(r, nextPatch);
    setStateFor(k, 'saving');

    try {
      await saveSelection({
        orgID: r.orgID,
        csF2SubcategoryID: r.csF2SubcategoryID,
        csF1SubcategoryID: r.csF1SubcategoryID,
        maturityLevel: r.maturityLevel,
        attributeNum: r.attributeNum,
        selectionStatus: nextPatch.selectionStatus ?? r.selectionStatus ?? null,
        selectionAttestation: nextPatch.selectionAttestation ?? r.selectionAttestation ?? null,
      });
      setStateFor(k, 'success');
      success('Saved');
    } catch {
      // rollback to original props row for this key if available
      const original = rows.find(x => rowKey(x) === k);
      if (original) patchLocal(k, original);
      setStateFor(k, 'error');
      error('Save failed. Please retry.');
    }
  };

  // Sorting: baseline first (csf1 → ML3 → ML4 → attrNum) then customs (ML3 → ML4 → customNum)
  const sortedRows = useMemo(() => {
    const base = [];
    const cust = [];
    const isCustom = (x) => !!(x.isCustom || x.customAttributeDefinition || x.customAttributeNum != null);
    for (const r of localRows) (isCustom(r) ? cust : base).push(r);

    const pad = (n, w = 6) => String(n ?? 0).padStart(w, '0');
    const mlRank = (ml) => (Number(ml) === 4 ? 2 : 1);

    base.sort((a, b) => {
      const aK = `${pad(a.csF1SubcategoryID)}|${mlRank(a.maturityLevel)}|${pad(a.attributeNum, 4)}`;
      const bK = `${pad(b.csF1SubcategoryID)}|${mlRank(b.maturityLevel)}|${pad(b.attributeNum, 4)}`;
      return aK.localeCompare(bK);
    });
    cust.sort((a, b) => {
      const aK = `${mlRank(a.maturityLevel)}|${pad(a.customAttributeNum, 4)}`;
      const bK = `${mlRank(b.maturityLevel)}|${pad(b.customAttributeNum, 4)}`;
      return aK.localeCompare(bK);
    });
    return [...base, ...cust];
  }, [localRows]);

  return (
    <Paper variant="outlined" sx={{ mt: 2 }}>
      <TableContainer sx={{ maxHeight, overflow: 'auto', pr: 1.5, pb: 0.5 }}>
        <Table stickyHeader size="small" sx={{ tableLayout: 'auto' }}>
          <colgroup>
            <col style={{ width: '4%' }} />
            <col style={{ width: '42%' }} />
            <col style={{ width: '6%' }} />
            <col style={{ width: '10%' }} />
            <col style={{ width: '12%' }} />
            <col style={{ width: '12%' }} />
            <col style={{ width: '10%' }} />
            <col style={{ width: '4%' }} />
          </colgroup>

          <TableHead>
            <TableRow>
              <TableCell>#</TableCell>
              <TableCell>Attribute Definition</TableCell>
              <TableCell align="center">ML</TableCell>
              <TableCell>NIST 1.1</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>2025 Attestation</TableCell>
              <TableCell align="center">2024 Assessor Score</TableCell>
              <TableCell align="center">Actions</TableCell>
            </TableRow>
          </TableHead>

          <TableBody>
            {sortedRows.map((r, i) => (
              <Row
                key={rowKey(r)}
                index={i + 1}
                row={r}
                state={actionState.get(rowKey(r))}
                onSaveBaseline={handleSaveBaseline}
                onPatchRow={optimisticPatch}
                onDeleteRow={onDeleteRow}
                patchLocal={patchLocal}
              />
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
}

function Row({ index, row, state, onSaveBaseline, onPatchRow, onDeleteRow, patchLocal }) {
  const { success, error } = useToast();
  const isCustom = row.isCustom || !!row.customAttributeDefinition || row.customAttributeNum != null;

  // ML tint
  const mlTint = (theme) => {
    const isML4 = Number(row.maturityLevel) === 4;
    const base = isML4 ? alpha(theme.palette.warning.main, 0.06) : alpha(theme.palette.primary.main, 0.04);
    const bar  = isML4 ? theme.palette.warning.main : theme.palette.primary.main;
    return { backgroundColor: base, boxShadow: `inset 4px 0 0 0 ${alpha(bar, 0.9)}` };
  };

  const k = rowKey(row);

  // inline edit state for custom rows
  const [edit, setEdit] = useState(false);
  const [def, setDef] = useState(row.customAttributeDefinition || '');
  const [att, setAtt] = useState(row.customAttributeAttestation || '');
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (!edit) {
      setDef(row.customAttributeDefinition || '');
      setAtt(row.customAttributeAttestation || '');
    }
  }, [edit, row.customAttributeDefinition, row.customAttributeAttestation]);

  const saveCustomInline = async () => {
    setSaving(true);
    try {
      await saveCustomAttribute({
        action: 'update',
        orgId: row.orgID,
        csf2SubcategoryId: row.csF2SubcategoryID,
        maturityLevel: row.maturityLevel,
        attributeNum: row.customAttributeNum,
        attrDefinition: def.trim(),
        attestation: att || null,
      });
      const patch = {
        customAttributeDefinition: def.trim(),
        customAttributeAttestation: att || null,
      };
      onPatchRow(row, patch); // optimistic + parent signal
      success('Updated');
      setEdit(false);
    } catch {
      error('Update failed');
    } finally {
      setSaving(false);
    }
  };

  const deleteCustom = async () => {
    try {
      await saveCustomAttribute({
        action: 'delete',
        orgId: row.orgID,
        csf2SubcategoryId: row.csF2SubcategoryID,
        maturityLevel: row.maturityLevel,
        attributeNum: row.customAttributeNum,
      });
      onDeleteRow?.(k);
      success('Deleted');
    } catch {
      error('Delete failed');
    }
  };

  const attributeText = row.customAttributeDefinition || row.attributeDefinition || '';

  return (
    <TableRow hover sx={(t) => ({ verticalAlign: 'top', ...(Number(row.maturityLevel) >= 3 ? mlTint(t) : {}) })}>
      <TableCell>{index}</TableCell>

      <TableCell sx={{ whiteSpace: 'normal', wordBreak: 'break-word', lineHeight: 1.5, pr: 3 }}>
        {isCustom && edit ? (
          <TextField
            size="small"
            fullWidth
            value={def}
            onChange={(e) => setDef(e.target.value)}
            multiline
          />
        ) : (
          attributeText
        )}
      </TableCell>

      <TableCell align="center">
        {row.maturityLevel}
        {isCustom && (
          <Chip
            label="Custom"
            size="small"
            sx={(t) => ({
              ml: 0.75,
              height: 20,
              bgcolor: t.palette.info.light,
              color: t.palette.info.dark,
              borderRadius: 10,
            })}
          />
        )}
      </TableCell>

      <TableCell>{isCustom ? '—' : (row.csF1SubcategoryName || '—')}</TableCell>

      {/* STATUS */}
      <TableCell>
        {isCustom ? (
          // Display-only chip for custom rows
          <Chip
            size="small"
            label="Add"
            variant="filled"
            color="primary"
            sx={(t) => ({ borderWidth: 1, color: black, my: 2, ml: 2})}
          />
        ) : (
          <Select
            fullWidth
            size="small"
            value={row.selectionStatus || ''}
            displayEmpty
            onChange={(e) => {
              const v = e.target.value || null;
              const patch = { selectionStatus: v };
              if (v === 'Remove') patch.selectionAttestation = null;
              onSaveBaseline(row, patch);
            }}
            renderValue={(v) => (
              <Chip size="small" label={v || '—'} variant="outlined" sx={(t) => ({ borderWidth: 1, ...lightStatusChip(t, v) })} />
            )}
          >
            <MenuItem value=""><em>—</em></MenuItem>
            {STATUS_OPTIONS.map(o => <MenuItem key={o} value={o}>{o}</MenuItem>)}
          </Select>
        )}
      </TableCell>

      {/* 2025 Attestation */}
      <TableCell>
        {isCustom ? (
          edit ? (
            <Select
              fullWidth
              size="small"
              displayEmpty
              value={att || ''}
              onChange={(e) => setAtt(e.target.value || '')}
              renderValue={(v) => (v ? v : '—')}
            >
              <MenuItem value=""><em>—</em></MenuItem>
              {ATTEST_OPTIONS.map(o => <MenuItem key={o} value={o}>{o}</MenuItem>)}
            </Select>
          ) : (
            row.customAttributeAttestation
              ? <Chip size="small" label={row.customAttributeAttestation} sx={(t)=>({ ...deepChip(t, row.customAttributeAttestation), fontWeight: 600, my: 2, ml: 2})} />
              : '—'
          )
        ) : (
          <Select
            fullWidth
            size="small"
            value={row.selectionAttestation || ''}
            displayEmpty
            disabled={row.selectionStatus === 'Remove'}
            onChange={(e) => onSaveBaseline(row, { selectionAttestation: e.target.value || null })}
            renderValue={(v) => (
              <Chip size="small" label={v || '—'} sx={(t) => ({ ...deepChip(t, v), fontWeight: 600 })} />
            )}
          >
            <MenuItem value=""><em>—</em></MenuItem>
            {ATTEST_OPTIONS.map(o => <MenuItem key={o} value={o}>{o}</MenuItem>)}
          </Select>
        )}
      </TableCell>

      {/* 2024 Assessor Score */}
      <TableCell align="center">
        {row.assessScore2024
          ? <Chip size="small" label={row.assessScore2024} sx={(t) => ({ ...deepChip(t, row.assessScore2024), fontWeight: 600, my: 2, ml:2 })} />
          : '—'}
      </TableCell>

      {/* Actions */}
      <TableCell align="center">
        {isCustom ? (
          edit ? (
            <>
              <Tooltip title="Save">
                <span>
                  <IconButton size="small" onClick={saveCustomInline} disabled={saving || !def.trim()}>
                    <SaveOutlinedIcon fontSize="small" />
                  </IconButton>
                </span>
              </Tooltip>
              <Tooltip title="Cancel">
                <IconButton size="small" onClick={() => { setEdit(false); setDef(row.customAttributeDefinition || ''); setAtt(row.customAttributeAttestation || ''); }}>
                  <CloseOutlinedIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            </>
          ) : (
            <>
              <Tooltip title="Edit">
                <IconButton size="small" onClick={() => setEdit(true)}>
                  <EditOutlinedIcon fontSize="small" />
                </IconButton>
              </Tooltip>
              <Tooltip title="Delete">
                <IconButton size="small" onClick={deleteCustom}>
                  <DeleteOutlineOutlinedIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            </>
          )
        ) : state === 'saving' ? (
          <CircularProgress size={20} />
        ) : state === 'success' ? (
          <Tooltip title="Saved"><CheckCircleRoundedIcon color="success" /></Tooltip>
        ) : state === 'error' ? (
          <Tooltip title="Save failed"><CancelRoundedIcon color="error" /></Tooltip>
        ) : null}
      </TableCell>
    </TableRow>
  );
}
