using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;

namespace Gef.Portal.Authorization;

/// <summary>
/// Dynamic policy provider:
/// - If a policy name is explicitly registered, use it.
/// - Otherwise, dynamically create a policy that requires:
///     * an authenticated user, and
///     * a claim portal:policy == <policyName>
/// This lets you add new roles/policies in the DB (via SP) without code changes.
/// </summary>
public sealed class DynamicPolicyProvider : DefaultAuthorizationPolicyProvider
{
    public DynamicPolicyProvider(IOptions<AuthorizationOptions> options) : base(options) { }

    public override async Task<AuthorizationPolicy?> GetPolicyAsync(string policyName)
    {
        // Try a statically-registered policy first
        var existing = await base.GetPolicyAsync(policyName);
        if (existing is not null) return existing;

        // Otherwise build a claim-based policy dynamically
        return new AuthorizationPolicyBuilder()
            .RequireAuthenticatedUser()
            .RequireClaim(PortalClaimTypes.Policy, policyName)
            .Build();
    }
}
