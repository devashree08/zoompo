// src/features/attributeMapping/components/organisms/RightHeaderComposite.jsx
import * as React from 'react';
import {
  Box, Paper, Typography, Chip, Button, IconButton,
  Dialog, DialogTitle, DialogContent, DialogActions, Stack, Divider
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon  from '@mui/icons-material/ExpandLess';
import OpenInNewIcon   from '@mui/icons-material/OpenInNew';

const Card = ({ title, children, sx }) => (
  <Paper variant="outlined" sx={{ p: 2, borderRadius: 2, ...sx }}>
    <Typography variant="overline" sx={{ letterSpacing: 1, color: 'text.secondary' }}>
      {title}
    </Typography>
    {children}
  </Paper>
);

const TitleAndText = ({ title, text }) => (
  <Box>
    <Typography variant="h6" sx={{ fontWeight: 800, mb: 0.5 }}>{title}</Typography>
    <Typography variant="body1" color="text.secondary">{text}</Typography>
  </Box>
);

function ExpandableText({ title, text, maxLines = 3 }) {
  const [open, setOpen] = React.useState(false);
  const [dialogOpen, setDialogOpen] = React.useState(false);
  return (
    <Card title={title}>
      <Box sx={{
        position: 'relative',
        ...(open ? {} : {
          display: '-webkit-box',
          WebkitLineClamp: maxLines,
          WebkitBoxOrient: 'vertical',
          overflow: 'hidden'
        })
      }}>
        <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>{text || '—'}</Typography>
      </Box>
      <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
        <Button size="small" onClick={() => setOpen(v => !v)}>
          {open ? 'Show less' : 'Show more'}
        </Button>
        {!!text && (
          <Button size="small" endIcon={<OpenInNewIcon fontSize="small" />} onClick={() => setDialogOpen(true)}>
            Open dialog
          </Button>
        )}
      </Stack>

      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} fullWidth maxWidth="md">
        <DialogTitle>{title}</DialogTitle>
        <DialogContent dividers>
          <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>{text}</Typography>
        </DialogContent>
        <DialogActions><Button onClick={() => setDialogOpen(false)}>Close</Button></DialogActions>
      </Dialog>
    </Card>
  );
}

const splitCsv = (csv) => (csv || '').split(',').map(s => s.trim()).filter(Boolean);

export default function RightHeaderComposite({ header, associatedRows, ownerCsv, custodianCsv }) {
  const [collapsed, setCollapsed] = React.useState(false);
  if (!header) return null;

  // unique 1.1s
  const assoc = React.useMemo(() => {
    const m = new Map();
    (associatedRows || []).forEach(r => {
      if (r.csF1SubcategoryID && Number(r.csF1SubcategoryID) !== 0 && !m.has(r.csF1SubcategoryID)) {
        m.set(r.csF1SubcategoryID, { id: r.csF1SubcategoryID, name: r.csF1SubcategoryName, lang: r.csF1SubcategoryLanguage });
      }
    });
    return [...m.values()];
  }, [associatedRows]);

  const owners = splitCsv(ownerCsv);
  const custodians = splitCsv(custodianCsv);

  return (
    <Box>
      {/* collapsed summary */}
      <Paper variant="outlined" sx={{ p: 1, borderRadius: 2, mb: 1, display: 'flex', alignItems: 'center' }}>
        <Typography variant="subtitle1" sx={{ fontWeight: 800 }}>
          {header.csF2SubcategoryName}
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
          {header.csF2SubcategoryLanguage}
        </Typography>
        <Box sx={{ ml: 'auto' }}>
          <IconButton size="small" onClick={() => setCollapsed(c => !c)}>
            {collapsed ? <ExpandMoreIcon/> : <ExpandLessIcon/>}
          </IconButton>
        </Box>
      </Paper>

      {/* CSS Grid layout – responsive to pane width, not viewport */}
      {!collapsed && (
        <Box sx={{ display: 'grid', gridTemplateColumns: '3fr 1fr', gap: 16, mb: 2 }}>
          {/* left column: 3-up cards + two text cards */}
          <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(3, minmax(220px, 1fr))', gap: 16 }}>
            <Card title="FUNCTION">
              <TitleAndText title={header.functionName} text={header.functionLanguage} />
            </Card>
            <Card title="CATEGORY">
              <TitleAndText title={header.categoryName} text={header.categoryLanguage} />
            </Card>
            <Card title="CSF 2.0 SUBCATEGORY">
              <TitleAndText title={header.csF2SubcategoryName} text={header.csF2SubcategoryLanguage} />
              {(owners.length || custodians.length) && (
                <>
                  <Divider sx={{ my: 1.25 }} />
                  <Typography variant="overline" sx={{ color: 'text.secondary' }}>OWNER / CUSTODIAN</Typography>
                  <Stack direction="row" spacing={1} flexWrap="wrap" useFlexGap sx={{ mt: 0.5 }}>
                    {owners.map((n, i) => <Chip key={`o-${i}`} label={`Owner: ${n}`} size="small" />)}
                    {custodians.map((n, i) => <Chip key={`c-${i}`} label={`Custodian: ${n}`} size="small" />)}
                  </Stack>
                </>
              )}
            </Card>

            <Box sx={{ gridColumn: '1 / span 2' }}>
              <ExpandableText title="CHANGE SUMMARY" text={header.changeSummary} />
            </Box>
            <Box>
              <ExpandableText title="IMPLEMENTATION EXAMPLES" text={header.implementationExamples} />
            </Box>
          </Box>

          {/* right column: associated 1.1 */}
          <Card title="ASSOCIATED 1.1 SUBCATEGORIES">
            {assoc.length === 0 ? (
              <Typography variant="body2" color="text.disabled">None.</Typography>
            ) : (
              <Box component="ul" sx={{ pl: 3, m: 0 }}>
                {assoc.map(a => (
                  <li key={a.id}>
                    <Typography variant="h6" sx={{ fontWeight: 800, mb: 0.25 }}>{a.name}</Typography>
                    <Typography variant="body1" color="text.secondary">{a.lang}</Typography>
                  </li>
                ))}
              </Box>
            )}
          </Card>
        </Box>
      )}
    </Box>
  );
}

