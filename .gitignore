import * as React from 'react';
import {
  Box, Grid, Card, CardContent, Typography, Stack, Chip, Button, Collapse,
  Dialog, DialogTitle, DialogContent
} from '@mui/material';
import FunctionBadge from '../atoms/FunctionBadge';
import AssociatedCsf11Panel from './AssociatedCsf11Panel';

function LongTextDialog({ open, title, text, onClose }) {
  const openNew = () => {
    const w = window.open('', '_blank');
    if (w) {
      w.document.write(`<pre style="white-space:pre-wrap;font-family:system-ui,Segoe UI,Arial;padding:16px">${(text||'').replaceAll('<','&lt;')}</pre>`);
      w.document.close();
    }
  };
  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>{title} <Button onClick={openNew} size="small" sx={{ ml: 1 }}>Open in new window</Button></DialogTitle>
      <DialogContent dividers><Typography whiteSpace="pre-wrap">{text || '—'}</Typography></DialogContent>
    </Dialog>
  );
}

export default function RightHeaderComposite({ header, associatedRows=[], ownerCsv='', custodianCsv='' }) {
  const [open, setOpen] = React.useState(true);
  const [showChange, setShowChange] = React.useState(false);
  const [showImpl, setShowImpl] = React.useState(false);

  const owners = (ownerCsv||'').split(',').map(s=>s.trim()).filter(Boolean);
  const custodians = (custodianCsv||'').split(',').map(s=>s.trim()).filter(Boolean);

  const short = (txt, n=6) => {
    if (!txt) return '—';
    const lines = txt.split(/\r?\n/);
    return lines.length <= n ? txt : lines.slice(0,n).join('\n') + '\n…';
  };

  return (
    <Box sx={{ mb: 2 }}>
      <Stack direction="row" justifyContent="flex-end" sx={{ mb: 1 }}>
        <Button size="small" onClick={() => setOpen(o=>!o)}>{open ? 'Hide header' : 'Show header'}</Button>
      </Stack>

      <Collapse in={open} timeout="auto" unmountOnExit>
        <Grid container spacing={2}>
          {/* LEFT: three cards */}
          <Grid item xs={12} md={8}>
            <Grid container spacing={2}>
              {/* Function */}
              <Grid item xs={12} md={4}>
                <Card variant="outlined" sx={{ height: '100%' }}>
                  <CardContent>
                    <Typography variant="overline" color="text.secondary">Function</Typography>
                    <Stack direction="row" spacing={1} alignItems="center" sx={{ mb: 1 }}>
                      <FunctionBadge functionName={header.functionName} />
                      <Typography variant="h6" fontWeight={800}>{header.functionName}</Typography>
                    </Stack>
                    <Typography variant="body2" color="text.secondary">{header.functionLanguage}</Typography>
                  </CardContent>
                </Card>
              </Grid>

              {/* Category */}
              <Grid item xs={12} md={4}>
                <Card variant="outlined" sx={{ height: '100%' }}>
                  <CardContent>
                    <Typography variant="overline" color="text.secondary">Category</Typography>
                    <Typography variant="h6" fontWeight={800}>{header.categoryName}</Typography>
                    <Typography variant="body2" color="text.secondary">{header.categoryLanguage}</Typography>
                  </CardContent>
                </Card>
              </Grid>

              {/* CSF 2.0 Subcategory */}
              <Grid item xs={12} md={4}>
                <Card variant="outlined" sx={{ height: '100%' }}>
                  <CardContent>
                    <Typography variant="overline" color="text.secondary">CSF 2.0 Subcategory</Typography>
                    <Typography variant="h6" fontWeight={800}>{header.csF2SubcategoryName}</Typography>
                    <Typography variant="body2" color="text.secondary">{header.csF2SubcategoryLanguage}</Typography>

                    <Typography variant="overline" color="text.secondary" sx={{ mt: 1.5, display:'block' }}>Owner / Custodian</Typography>
                    <Stack direction="row" spacing={1} useFlexGap flexWrap="wrap">
                      {owners.map(n => <Chip key={`own-${n}`} size="small" label={`Owner: ${n}`} />)}
                      {custodians.map(n => <Chip key={`cus-${n}`} size="small" label={`Custodian: ${n}`} />)}
                      {!owners.length && !custodians.length && (
                        <Typography variant="body2" color="text.secondary">—</Typography>
                      )}
                    </Stack>
                  </CardContent>
                </Card>
              </Grid>

              {/* Long texts as two wide cards */}
              <Grid item xs={12} md={6}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="overline" color="text.secondary">Change Summary</Typography>
                    <Typography whiteSpace="pre-wrap" sx={{ mb: 1 }}>{short(header.changeSummary)}</Typography>
                    <Button size="small" onClick={() => setShowChange(true)}>Show more</Button>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={6}>
                <Card variant="outlined">
                  <CardContent>
                    <Typography variant="overline" color="text.secondary">Implementation Examples</Typography>
                    <Typography whiteSpace="pre-wrap" sx={{ mb: 1 }}>{short(header.implementationExamples)}</Typography>
                    <Button size="small" onClick={() => setShowImpl(true)}>Show more</Button>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Grid>

          {/* RIGHT: Associated 1.1 list */}
          <Grid item xs={12} md={4}>
            <AssociatedCsf11Panel rows={associatedRows} />
          </Grid>
        </Grid>
      </Collapse>

      <LongTextDialog open={showChange} title="Change Summary" text={header.changeSummary} onClose={() => setShowChange(false)} />
      <LongTextDialog open={showImpl}   title="Implementation Examples" text={header.implementationExamples} onClose={() => setShowImpl(false)} />
    </Box>
  );
}
