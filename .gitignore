using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Logging;
using Gef.Portal.Services;

namespace Gef.Portal.Auth;

// Runs after authentication. Queries your SP for policy names and
// stamps them into the identity as claims: portal:policy = <PolicyName>.
public sealed class PortalClaimsTransformation : IClaimsTransformation
{
    private readonly IPortalPolicyService _service;
    private readonly ILogger<PortalClaimsTransformation> _logger;

    public PortalClaimsTransformation(IPortalPolicyService service, ILogger<PortalClaimsTransformation> logger)
    {
        _service = service;
        _logger = logger;
    }

    public async Task<ClaimsPrincipal> TransformAsync(ClaimsPrincipal principal)
    {
        var id = principal.Identity as ClaimsIdentity;
        if (id is null || !id.IsAuthenticated)
            return principal;

        // Avoid double-stamping
        if (id.FindFirst(PortalClaimTypes.Policy) is not null)
            return principal;

        var eid = id.FindFirst(PortalClaimTypes.EID)?.Value;
        var userName = id.FindFirst(PortalClaimTypes.UserName)?.Value;

        var policies = await _service.GetPoliciesAsync(eid, userName);

        foreach (var p in policies)
        {
            id.AddClaim(new Claim(PortalClaimTypes.Policy, p));
        }

        _logger.LogDebug("User {User} ({EID}) policies: {Policies}", userName, eid, string.Join(",", policies));

        return principal;
    }
}
