+ const keyOf = (r) => `${r.orgID}|${r.csF2SubcategoryID}|${r.maturityLevel}|${r.attributeNum}`;

@@
   const rowsForActiveOrg = React.useMemo(
     () => rowsForSelected.filter(r => r.orgID === activeOrgID),
     [rowsForSelected, activeOrgID]
   );

+  // Hide "Remove" rows when Final view is ON (custom rows have no status, so they remain)
+  const displayRows = React.useMemo(() => {
+    if (!filters.finalOnly) return rowsForActiveOrg;
+    return rowsForActiveOrg.filter(r => (r.selectionStatus || '') !== 'Remove');
+  }, [rowsForActiveOrg, filters.finalOnly]);

+  // patch from child (table/custom panel) without refetch
+  const onPatchRow = React.useCallback((k, patch) => {
+    setRows(prev => prev.map(r => (keyOf(r) === k ? { ...r, ...patch } : r)));
+  }, []);
+
+  const onAddCustomRow = React.useCallback((newRow) => {
+    setRows(prev => [...prev, newRow]);
+  }, []);
+
+  const onDeleteRow = React.useCallback((k) => {
+    setRows(prev => prev.filter(r => keyOf(r) !== k));
+  }, []);

@@  render right pane
-                  <AttributeGroupTable rows={rowsForActiveOrg} />
+                  <AttributeGroupTable
+                    rows={displayRows}
+                    onPatchRow={onPatchRow}
+                  />

-                  <AddCustomAttributePanel
-                    orgName={orgsForTabs.find(x => x.orgID === activeOrgID)?.orgName}
-                    subcatName={selectedHeader.csF2SubcategoryName}
-                    editable={false}
-                  />
+                  <AddCustomAttributePanel
+                    orgID={activeOrgID}
+                    orgName={orgsForTabs.find(x => x.orgID === activeOrgID)?.orgName}
+                    csf2SubcategoryID={selectedSubcatID}
+                    subcatName={selectedHeader.csF2SubcategoryName}
+                    existingRows={rowsForActiveOrg}
+                    onAdded={onAddCustomRow}
+                    onPatched={onPatchRow}
+                    onDeleted={onDeleteRow}
+                  />
