import * as React from 'react';
import { Card, CardContent, Typography, Box, Stack, Chip } from '@mui/material';
import FunctionBadge from '../atoms/FunctionBadge';

/**
 * header: one selected header record (chosen subcategory)
 * ownerCsv, custodianCsv: comma-separated names for chip display
 */
export default function HeaderInfoPanel({ header, ownerCsv, custodianCsv }) {
  if (!header) return null;

  return (
    <Card variant="outlined" sx={{ mb: 2 }}>
      <CardContent>
        <Stack spacing={1.25}>
          <Box>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <FunctionBadge functionName={header.FunctionName} size={18} />
              <Typography variant="h6" sx={{ ml: .5 }}>{header.FunctionName}</Typography>
            </Box>
            {header.FunctionLanguage && (
              <Typography variant="body2" color="text.secondary">
                {header.FunctionLanguage}
              </Typography>
            )}
          </Box>

          <Box>
            <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
              {header.CategoryName}
            </Typography>
            {header.CategoryLanguage && (
              <Typography variant="body2" color="text.secondary">
                {header.CategoryLanguage}
              </Typography>
            )}
          </Box>

          <Box>
            <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
              {header.CSF2SubcategoryName}
            </Typography>
            {header.CSF2SubcategoryLanguage && (
              <Typography variant="body2" color="text.secondary">
                {header.CSF2SubcategoryLanguage}
              </Typography>
            )}
          </Box>

          {header.ChangeSummary && (
            <Box>
              <Typography variant="overline" color="text.secondary">Change Summary</Typography>
              <Typography variant="body2">{header.ChangeSummary}</Typography>
            </Box>
          )}

          {header.ImplementationExamples && (
            <Box>
              <Typography variant="overline" color="text.secondary">Implementation Examples</Typography>
              <Typography variant="body2">{header.ImplementationExamples}</Typography>
            </Box>
          )}

          {(ownerCsv || custodianCsv) && (
            <Stack direction="row" spacing={1} useFlexGap flexWrap="wrap" sx={{ pt: .5 }}>
              {ownerCsv?.split(',').filter(Boolean).map(n => (
                <Chip key={`owner-${n}`} label={`Owner: ${n}`} size="small" />
              ))}
              {custodianCsv?.split(',').filter(Boolean).map(n => (
                <Chip key={`cust-${n}`} label={`Custodian: ${n}`} size="small" variant="outlined" />
              ))}
            </Stack>
          )}
        </Stack>
      </CardContent>
    </Card>
  );
}
