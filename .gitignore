import * as React from 'react';
import TreeAccordion from '../../../../ui/patterns/TreeAccordion';
import FunctionBadge from '../atoms/FunctionBadge';

/**
 * headers: FeedHeaderDto[] (Result A of /feed)
 * onSelectSubcat(id), selectedSubcatID
 */
export default function CsfTree({ headers = [], onSelectSubcat, selectedSubcatID }) {
  // Build nodes: Function -> Category -> Subcategory
  const nodes = React.useMemo(() => {
    const funcMap = new Map();

    headers.forEach(h => {
      // Function
      if (!funcMap.has(h.FunctionID)) {
        funcMap.set(h.FunctionID, {
          id: `F-${h.FunctionID}`,
          label: h.FunctionName,
          sublabel: h.FunctionLanguage || '',
          children: new Map()
        });
      }
      const f = funcMap.get(h.FunctionID);

      // Category
      if (!f.children.has(h.CategoryID)) {
        f.children.set(h.CategoryID, {
          id: `C-${h.CategoryID}`,
          label: h.CategoryName,
          sublabel: h.CategoryLanguage || '',
          children: new Map()
        });
      }
      const c = f.children.get(h.CategoryID);

      // Subcategory (leaf)
      if (!c.children.has(h.CSF2SubcategoryID)) {
        c.children.set(h.CSF2SubcategoryID, {
          id: h.CSF2SubcategoryID, // numeric leaf id -> used to fetch rows
          label: h.CSF2SubcategoryName,
          sublabel: h.CSF2SubcategoryLanguage || ''
        });
      }
    });

    return Array.from(funcMap.values()).map(f => ({
      id: f.id,
      label: f.label,
      sublabel: f.sublabel,
      children: Array.from(f.children.values()).map(c => ({
        id: c.id,
        label: c.label,
        sublabel: c.sublabel,
        children: Array.from(c.children.values())
      }))
    }));
  }, [headers]);

  return (
    <TreeAccordion
      nodes={nodes}
      selectedId={selectedSubcatID}
      onSelect={onSelectSubcat}
      renderAdornment={(node, level) => level === 0 ? <FunctionBadge functionName={node.label} /> : null}
    />
  );
}
