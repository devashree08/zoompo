import * as React from 'react';
import { Autocomplete, TextField, Checkbox, Chip } from '@mui/material';

export default function MultiSelectSearch({
  label,
  value = [],               // array of primitive values
  options = [],             // [{ value, label }]
  onChange,
  placeholder = 'Selectâ€¦',
  disabled = false,
  limitTags = 3,            // show up to 3 chips in the box
  ...props
}) {
  // Map value (primitives) -> option objects for Autocomplete
  const valueObjects = React.useMemo(() => {
    const byValue = new Map(options.map(o => [o.value, o]));
    return value.map(v => byValue.get(v)).filter(Boolean);
  }, [value, options]);

  const handleChange = (_, selectedOptions) => {
    onChange?.(selectedOptions.map(o => o.value));
  };

  // Blue chips rendered INSIDE the field
  const renderTags = (selected, getTagProps) => {
    if (!selected?.length) return null;
    if (selected.length > limitTags) {
      // compact summary chip
      const first = selected[0];
      return [
        <Chip
          key={first.value}
          label={first.label}
          size="small"
          color="primary"
          {...getTagProps({ index: 0 })}
          sx={{ mr: .5 }}
        />,
        <Chip key="more" label={`${selected.length - 1} more`} size="small" sx={{ mr: .5 }} />
      ];
    }
    return selected.map((opt, i) => (
      <Chip
        key={opt.value}
        label={opt.label}
        size="small"
        color="primary"
        {...getTagProps({ index: i })}
        sx={{ mr: .5 }}
      />
    ));
  };

  return (
    <Autocomplete
      multiple
      disableCloseOnSelect
      options={options}
      value={valueObjects}
      onChange={handleChange}
      getOptionLabel={(o) => o?.label ?? ''}
      isOptionEqualToValue={(o, v) => o.value === v.value}
      filterSelectedOptions={false}              // keep selected visible in the menu
      renderOption={(props2, option, { selected }) => (
        <li {...props2}>
          <Checkbox checked={selected} sx={{ mr: 1 }} />
          {option.label}
        </li>
      )}
      renderTags={renderTags}
      limitTags={limitTags}
      ListboxProps={{ style: { maxHeight: 360 } }}
      fullWidth
      disabled={disabled}
      renderInput={(params) => (
        <TextField {...params} size="small" label={label} placeholder={placeholder} />
      )}
      {...props}
    />
  );
}
