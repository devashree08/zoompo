/* =======================================================================
   dbo.usp_PortalRoles_GetForUser
   Purpose : Resolve a user’s effective portal capabilities from AD groups.
             Returns one row with identity echoes, raw group flags, and
             effective edit capabilities (Admin implies all).
   Inputs  : @UserEID (preferred in prod) OR @UserName (fallback for test)
   Output  : One row. If user has no portal groups, IsPortalUser = 0 and
             all capabilities = 0 (no exception thrown).
   Fits in : Phase 2 middleware maps these fields to claims/policies; the
             frontend can call /api/me/permissions to shape the UI.
   ======================================================================= */
CREATE OR ALTER PROC dbo.usp_PortalRoles_GetForUser
    @UserEID   NVARCHAR(64)  = NULL,
    @UserName  NVARCHAR(256) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    IF @UserEID IS NULL AND @UserName IS NULL
        THROW 50070, 'Either @UserEID or @UserName is required.', 1;

    -- Load memberships for this user into a temp table (keeps plan clean & fast)
    IF @UserEID IS NOT NULL
    BEGIN
        SELECT *
        INTO #m
        FROM dbo.Portal_ADFeed
        WHERE UserEID = @UserEID;
    END
    ELSE
    BEGIN
        SELECT *
        INTO #m
        FROM dbo.Portal_ADFeed
        WHERE UserName = @UserName;
    END

    DECLARE @MembershipCount INT = (SELECT COUNT(*) FROM #m);

    -- If not a portal user, return a single "empty" row (no exception)
    IF @MembershipCount = 0
    BEGIN
        SELECT
            @UserEID  AS UserEID,
            @UserName AS UserName,
            NULL      AS FirstName,
            NULL      AS LastName,
            NULL      AS FullName,
            NULL      AS Email,

            CAST(0 AS BIT) AS IsAdmin,
            CAST(0 AS BIT) AS InAccountManagers,
            CAST(0 AS BIT) AS InOTDP,
            CAST(0 AS BIT) AS InTDM,
            CAST(0 AS BIT) AS InAccess,
            CAST(0 AS BIT) AS InGSAM,
            CAST(0 AS BIT) AS InReadonly,

            CAST(0 AS BIT) AS CanEditOTDP,
            CAST(0 AS BIT) AS CanEditTDM,
            CAST(0 AS BIT) AS CanEditAccess,
            CAST(0 AS BIT) AS CanEditGSAM,
            CAST(0 AS BIT) AS CanEditCustomerUpdateOnly,

            CAST(0 AS BIT) AS IsPortalUser,
            CAST(NULL AS NVARCHAR(MAX)) AS GroupsCsv;
        RETURN;
    END

    ;WITH flags AS (
        SELECT
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_ADMINS'           THEN 1 ELSE 0 END) AS IsAdmin,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_ACCOUNT_MANAGERS' THEN 1 ELSE 0 END) AS IsAccountMgr,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_OTDP'             THEN 1 ELSE 0 END) AS IsOTDP,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_TDM'              THEN 1 ELSE 0 END) AS IsTDM,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_ACCESS'           THEN 1 ELSE 0 END) AS IsAccess,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_GSAM'             THEN 1 ELSE 0 END) AS IsGSAM,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_READONLY'         THEN 1 ELSE 0 END) AS IsReadOnly,

            MIN(UserEID)   AS AnyEID,
            MIN(UserName)  AS AnyUserName,
            MIN(FirstName) AS AnyFirstName,
            MIN(LastName)  AS AnyLastName,
            MIN(FullName)  AS AnyFullName,
            MIN(Email)     AS AnyEmail
        FROM #m
    )
    SELECT
        COALESCE(f.AnyEID,   @UserEID)  AS UserEID,
        COALESCE(f.AnyUserName, @UserName) AS UserName,
        f.AnyFirstName AS FirstName,
        f.AnyLastName  AS LastName,
        f.AnyFullName  AS FullName,
        f.AnyEmail     AS Email,

        CAST(f.IsAdmin      AS BIT) AS IsAdmin,
        CAST(f.IsAccountMgr AS BIT) AS InAccountManagers,
        CAST(f.IsOTDP       AS BIT) AS InOTDP,
        CAST(f.IsTDM        AS BIT) AS InTDM,
        CAST(f.IsAccess     AS BIT) AS InAccess,
        CAST(f.IsGSAM       AS BIT) AS InGSAM,
        CAST(f.IsReadOnly   AS BIT) AS InReadonly,

        -- Effective capabilities (Admin implies all)
        CAST(CASE WHEN f.IsAdmin = 1 OR f.IsOTDP   = 1 THEN 1 ELSE 0 END AS BIT) AS CanEditOTDP,
        CAST(CASE WHEN f.IsAdmin = 1 OR f.IsTDM    = 1 THEN 1 ELSE 0 END AS BIT) AS CanEditTDM,
        CAST(CASE WHEN f.IsAdmin = 1 OR f.IsAccess = 1 THEN 1 ELSE 0 END AS BIT) AS CanEditAccess,
        CAST(CASE WHEN f.IsAdmin = 1 OR f.IsGSAM   = 1 THEN 1 ELSE 0 END AS BIT) AS CanEditGSAM,
        CAST(CASE WHEN f.IsAdmin = 1 OR f.IsAccountMgr = 1 THEN 1 ELSE 0 END AS BIT) AS CanEditCustomerUpdateOnly,

        CAST(1 AS BIT) AS IsPortalUser,

        -- Diagnostic: CSV of matched groups
        (SELECT STRING_AGG(GroupName, ',') WITHIN GROUP (ORDER BY GroupName) FROM #m) AS GroupsCsv
    FROM flags f;

    DROP TABLE IF EXISTS #m;
END
GO



/* =====================================================================================
   dbo.usp_PortalPolicies_GetForUser
   Purpose : Return the list of policy names the user qualifies for (row-per-policy).
             If user has no portal groups, returns 0 rows (caller treats as "deny").
   Inputs  : @UserEID (preferred) OR @UserName (fallback)
   Output  : One string column [PolicyName], multiple rows (e.g., 'PortalUser').
   Fits in : Phase 2 middleware: call this once per request (or short-cache) and
             convert each PolicyName row into a claim.
   ===================================================================================== */
CREATE OR ALTER PROC dbo.usp_PortalPolicies_GetForUser
    @UserEID   NVARCHAR(64)  = NULL,
    @UserName  NVARCHAR(256) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    IF @UserEID IS NULL AND @UserName IS NULL
        THROW 50071, 'Either @UserEID or @UserName is required.', 1;

    -- Load memberships for this user
    IF @UserEID IS NOT NULL
    BEGIN
        SELECT *
        INTO #m
        FROM dbo.Portal_ADFeed
        WHERE UserEID = @UserEID;
    END
    ELSE
    BEGIN
        SELECT *
        INTO #m
        FROM dbo.Portal_ADFeed
        WHERE UserName = @UserName;
    END

    IF NOT EXISTS (SELECT 1 FROM #m)
    BEGIN
        -- No portal membership => return no policies
        RETURN;
    END

    ;WITH flags AS (
        SELECT
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_ADMINS'           THEN 1 ELSE 0 END) AS IsAdmin,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_ACCOUNT_MANAGERS' THEN 1 ELSE 0 END) AS IsAccountMgr,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_OTDP'             THEN 1 ELSE 0 END) AS IsOTDP,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_TDM'              THEN 1 ELSE 0 END) AS IsTDM,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_ACCESS'           THEN 1 ELSE 0 END) AS IsAccess,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_GSAM'             THEN 1 ELSE 0 END) AS IsGSAM,
            MAX(CASE WHEN UPPER(GroupName) = 'GEF_PORTAL_READONLY'         THEN 1 ELSE 0 END) AS IsReadOnly
        FROM #m
    )
    SELECT PolicyName
    FROM (
        -- Admission to the portal requires at least one of the seven groups
        SELECT 'PortalUser'       AS PolicyName, 1 AS keep
        FROM flags
        WHERE (IsAdmin + IsAccountMgr + IsOTDP + IsTDM + IsAccess + IsGSAM + IsReadOnly) > 0

        UNION ALL
        SELECT 'Admin', 1 FROM flags WHERE IsAdmin = 1

        -- Page-edit policies
        UNION ALL SELECT 'Edit.OTDP.All',   1 FROM flags WHERE IsAdmin = 1 OR IsOTDP   = 1
        UNION ALL SELECT 'Edit.TDM.All',    1 FROM flags WHERE IsAdmin = 1 OR IsTDM    = 1
        UNION ALL SELECT 'Edit.Access.All', 1 FROM flags WHERE IsAdmin = 1 OR IsAccess = 1
        UNION ALL SELECT 'Edit.GSAM.All',   1 FROM flags WHERE IsAdmin = 1 OR IsGSAM   = 1

        -- Account Managers: limited to the 'Customer Update' column on Request/TDM/Access
        UNION ALL SELECT 'Edit.CustomerUpdate', 1 FROM flags WHERE IsAdmin = 1 OR IsAccountMgr = 1

        -- Optional: explicit ReadOnly marker when that’s the only role (not required if you
        -- simply default to view-only when no edit policies present)
        UNION ALL
        SELECT 'ReadOnly', 1 FROM flags
        WHERE IsAdmin = 0
          AND (IsOTDP + IsTDM + IsAccess + IsGSAM + IsAccountMgr) = 0
          AND IsReadOnly = 1
    ) x
    WHERE keep = 1
    ORDER BY PolicyName;

    DROP TABLE IF EXISTS #m;
END
GO

