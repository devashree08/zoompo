IF OBJECT_ID('dbo.UI_CsfAttributeFeed','U') IS NOT NULL
  DROP TABLE dbo.UI_CsfAttributeFeed;
GO

CREATE TABLE dbo.UI_CsfAttributeFeed
(
  /* 1) Org context */
  OrgID                     INT           NOT NULL,
  OrgName                   NVARCHAR(20)  NOT NULL,   -- e.g., "FSI"

  /* 2) CSF 2.0 Function */
  FunctionID                INT           NOT NULL,
  FunctionName              NVARCHAR(100) NOT NULL,   -- "Identity (ID)"
  FunctionLanguage          NVARCHAR(500) NULL,       -- function description

  /* 3) CSF 2.0 Category */
  CategoryID                INT           NOT NULL,
  CategoryName              NVARCHAR(200) NOT NULL,   -- "Asset Management (ID.AM)"
  CategoryLanguage          NVARCHAR(500) NULL,       -- category description

  /* 4) CSF 2.0 Subcategory */
  CSF2SubcategoryID         INT           NOT NULL,
  CSF2SubcategoryName       NVARCHAR(200) NOT NULL,   -- "ID.AM-01"
  CSF2SubcategoryLanguage   NVARCHAR(500) NULL,       -- subcategory description
  ChangeSummary             NVARCHAR(500) NULL,       -- 1.1 → 2.0 change summary
  ImplementationExamples    NVARCHAR(500) NULL,       -- NIST examples

  /* 5) Associated CSF 1.1 Subcategory (for display) */
  CSF1SubcategoryID         INT           NULL,
  CSF1SubcategoryName       NVARCHAR(200) NULL,       -- e.g., "ID.AM-1"
  CSF1SubcategoryLanguage   NVARCHAR(500) NULL,

  /* 6) Attribute-level data (baseline from CSF 1.1) */
  Ent_Subcat_Attr           NVARCHAR(100) NULL,       -- original CSF 1.1 key (hidden in UI)
  MaturityLevel             TINYINT       NOT NULL,   -- 3 or 4
  AttributeNum              INT           NOT NULL,   -- final or placeholder (10,20,…)
  AttributeDefinition       NVARCHAR(500) NULL,       -- baseline definition
  AssessScore2024           INT           NULL,       -- view-only

  /* 7) User selections for baseline attributes */
  SelectionStatus           VARCHAR(20)   NULL,       -- Keep / Remove / Partial
  SelectionAttestation      VARCHAR(20)   NULL,       -- Meet / DoesNotMeet / Partial(ly)

  /* 8) Org-added custom attributes (+ attestation) */
  CustomAttributeNum        INT           NULL,
  CustomAttributeDefinition NVARCHAR(500) NULL,
  CustomAttributeAttestation VARCHAR(20)  NULL,

  /* 9) Contacts (aggregated per Org × Subcat) */
  Owner                     NVARCHAR(200) NULL,       -- comma-separated names
  Custodian                 NVARCHAR(200) NULL,       -- comma-separated names

  /* 10) Persisted computed CSF 2.0 natural key (final identifier) */
  Ent_Subcat_Attr_CSF2 AS
  (
    'E=' + OrgName
    + '~S=' + CSF2SubcategoryName
    + '~ML=' + CAST(MaturityLevel AS NVARCHAR(3))
    + '~A=' + CAST(AttributeNum   AS NVARCHAR(5))
  ) PERSISTED,

  /* Primary Key (clustered) — one row per Org × Subcat × ML × Attribute */
  CONSTRAINT PK_UI_CsfAttributeFeed
    PRIMARY KEY CLUSTERED (OrgID, CSF2SubcategoryID, MaturityLevel, AttributeNum)
);
GO


---
/* Filter by Org quickly (redundant with PK prefix, but good for coverage in some plans) */
CREATE NONCLUSTERED INDEX IX_UI_ByOrg
  ON dbo.UI_CsfAttributeFeed (OrgID);

/* Drilldowns by Function/Category/Subcategory within an Org */
CREATE NONCLUSTERED INDEX IX_UI_ByFunction
  ON dbo.UI_CsfAttributeFeed (OrgID, FunctionID);

CREATE NONCLUSTERED INDEX IX_UI_ByCategory
  ON dbo.UI_CsfAttributeFeed (OrgID, CategoryID);

CREATE NONCLUSTERED INDEX IX_UI_BySubcategory
  ON dbo.UI_CsfAttributeFeed (OrgID, CSF2SubcategoryID);

/* Optional: lookups by the final natural key (deep-links/exports) */
CREATE NONCLUSTERED INDEX IX_UI_ByEntCsf2Key
  ON dbo.UI_CsfAttributeFeed (Ent_Subcat_Attr_CSF2);

/* Owner/Custodian filters:
   We’re storing comma-separated names for simplicity. CHARINDEX filters aren’t SARGable,
   but a narrow index still helps coverage & some plan shapes. Keep only if you actually filter on them. */
CREATE NONCLUSTERED INDEX IX_UI_ByOwner
  ON dbo.UI_CsfAttributeFeed (Owner);

CREATE NONCLUSTERED INDEX IX_UI_ByCustodian
  ON dbo.UI_CsfAttributeFeed (Custodian);
GO


