
namespace Gef.Portal.Models;

public sealed class GEF_UserRoles_MatrixRow_Model
{
    public int    TotalRows { get; set; }

    public string? UserEID   { get; set; }
    public string? UserName  { get; set; }
    public string? FirstName { get; set; }
    public string? LastName  { get; set; }
    public string? FullName  { get; set; }
    public string? Email     { get; set; }

    public bool IsAdmin            { get; set; }
    public bool InAccountManagers  { get; set; }
    public bool InOTDP             { get; set; }
    public bool InAccess           { get; set; }
    public bool InGSAM             { get; set; }
    public bool InReadOnly         { get; set; }

    public bool CanEditOTDP               { get; set; }
    public bool CanEditTDM                { get; set; }
    public bool CanEditAccess             { get; set; }
    public bool CanEditGSAM               { get; set; }
    public bool CanEditCustomerUpdateOnly { get; set; }

    public bool   IsPortalUser { get; set; }
    public string? GroupsCsv   { get; set; }
}


using System.Data;
using Dapper;
using Gef.Portal.Authorization;
using Gef.Portal.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Gef.Portal.Controllers;

[Route("API/V1/[controller]")]
[ApiController]
[Authorize(Policy = PortalPolicies.Admin)] // Admin-only diagnostics
public class GEF_UserRoles_Controller(GEF_DbContext dbContext) : ControllerBase
{
    private readonly GEF_DbContext _dbContext = dbContext;

    /// <summary>
    /// Returns one row per unique portal user with membership flags, derived capabilities, and GroupsCsv.
    /// Backed by dbo.usp_PortalUsers_BrowseMatrix. Suitable for feeding an admin AG Grid.
    /// </summary>
    [HttpGet("UsersMatrix")]
    public async Task<IActionResult> GetUsersMatrix(
        [FromQuery] string? query        = null,
        [FromQuery] string? groupName    = null,
        [FromQuery] string? workerStatus = null,
        [FromQuery] int pageNumber       = 1,
        [FromQuery] int pageSize         = 100)
    {
        try
        {
            await using var connection = _dbContext.Database.GetDbConnection();
            if (connection.State != ConnectionState.Open)
                await connection.OpenAsync(HttpContext.RequestAborted);

            var p = new DynamicParameters();
            p.Add("@Query",        string.IsNullOrWhiteSpace(query) ? null : query, DbType.String);
            p.Add("@GroupName",    string.IsNullOrWhiteSpace(groupName) ? null : groupName, DbType.String);
            p.Add("@WorkerStatus", string.IsNullOrWhiteSpace(workerStatus) ? null : workerStatus, DbType.String);
            p.Add("@PageNumber",   pageNumber <= 0 ? 1 : pageNumber, DbType.Int32);
            p.Add("@PageSize",     pageSize   <= 0 ? 100 : pageSize, DbType.Int32);

            var rows = await connection.QueryAsync<GEF_UserRoles_MatrixRow_Model>(
                "dbo.usp_PortalUsers_BrowseMatrix",
                p,
                commandType: CommandType.StoredProcedure);

            // For a grid, return 200 with an array (possibly empty).
            return Ok(rows);
        }
        catch
        {
            // GlobalExceptionHandler will format the ProblemDetails
            throw;
        }
    }
}


