import * as React from 'react';
import {
  Box, Paper, Table, TableHead, TableBody, TableRow, TableCell,
  TableContainer, Select, MenuItem, Chip, Stack, CircularProgress, Tooltip
} from '@mui/material';
import CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded';
import { alpha } from '@mui/material/styles';

import { saveSelection } from '../../api/selectionApi';
import useToast from '../../../../ui/feedback/useToast';

// --- helpers ---------------------------------------------------------------

const STATUS_OPTIONS = ['Keep', 'Remove'];
const ATTEST_OPTIONS = ['Meet', 'Partial Meet', 'Does Not Meet'];

const attestationChipStyle = (theme, value) => {
  switch (value) {
    case 'Meet':
      return { bgcolor: theme.palette.success.main, color: theme.palette.common.white };
    case 'Partial Meet':
      return { bgcolor: theme.palette.warning.main, color: theme.palette.common.black };
    case 'Does Not Meet':
      return { bgcolor: theme.palette.error.main, color: theme.palette.common.white };
    default:
      return { bgcolor: theme.palette.grey[300], color: theme.palette.text.primary };
  }
};

const assessorChipStyle = (theme, value) => attestationChipStyle(theme, value);

// lighter chips for Status
const statusChipStyle = (theme, value) => {
  if (value === 'Keep') {
    return { bgcolor: theme.palette.success.light, color: theme.palette.success.dark, borderColor: alpha(theme.palette.success.main, 0.4) };
  }
  if (value === 'Remove') {
    return { bgcolor: theme.palette.error.light, color: theme.palette.error.dark, borderColor: alpha(theme.palette.error.main, 0.4) };
  }
  return { bgcolor: theme.palette.grey[200], color: theme.palette.text.primary, borderColor: theme.palette.grey[300] };
};

// stable composite key for a row
const rowKey = (r) =>
  `${r.orgID}|${r.csF2SubcategoryID}|${r.maturityLevel}|${r.attributeNum}`;

/**
 * Props:
 *  - rows: normalized rows filtered to the active org and selected subcategory
 *  - onPatchRow: (key, patch) => void   // optional; if provided we call this to update parent state optimistically
 *  - maxHeight: css height for scroll area (default calc to fit under header & tabs)
 */
export default function AttributeGroupTable({ rows = [], onPatchRow, maxHeight = 'calc(100vh - 420px)' }) {
  const { success, error } = useToast();

  // local mirrors so we can optimistically update even if parent doesn’t pass onPatchRow
  const [localRows, setLocalRows] = React.useState(rows);
  React.useEffect(() => setLocalRows(rows), [rows]);

  // saving state per row key
  const [saving, setSaving] = React.useState(new Map());     // key -> 'saving' | 'saved'
  const setSavingState = (key, val) => setSaving(prev => new Map(prev).set(key, val));

  const patchRowLocal = React.useCallback((key, patch) => {
    setLocalRows(prev => prev.map(r => (rowKey(r) === key ? { ...r, ...patch } : r)));
  }, []);

  const optimisticPatch = React.useCallback((r, patch) => {
    const key = rowKey(r);
    if (onPatchRow) onPatchRow(key, patch);
    else patchRowLocal(key, patch);
  }, [onPatchRow, patchRowLocal]);

  const handleSave = async (r, nextPatch) => {
    const key = rowKey(r);

    // 1) optimistic UI
    optimisticPatch(r, nextPatch);
    setSavingState(key, 'saving');

    try {
      await saveSelection({
        orgID: r.orgID,
        csF2SubcategoryID: r.csF2SubcategoryID,
        csF1SubcategoryID: r.csF1SubcategoryID,
        maturityLevel: r.maturityLevel,
        attributeNum: r.attributeNum,
        selectionStatus: nextPatch.selectionStatus ?? r.selectionStatus ?? null,
        selectionAttestation: nextPatch.selectionAttestation ?? r.selectionAttestation ?? null,
      });

      setSavingState(key, 'saved');
      success('Saved');

      // clear the check after a moment
      setTimeout(() => setSaving(prev => {
        const n = new Map(prev);
        if (n.get(key) === 'saved') n.delete(key);
        return n;
      }), 1000);
    } catch (e) {
      // revert optimistic change
      if (onPatchRow) onPatchRow(key, r); else patchRowLocal(key, r);
      setSaving(prev => {
        const n = new Map(prev); n.delete(key); return n;
      });
      error('Save failed. Please retry.');
    }
  };

  return (
    <Paper variant="outlined" sx={{ mt: 2 }}>
      <TableContainer sx={{ maxHeight, overflowY: 'auto' }}>
        <Table stickyHeader size="medium" sx={{ tableLayout: 'fixed' }}>
          <TableHead>
            <TableRow>
              <TableCell width={56}>#</TableCell>
              <TableCell>Attribute Definition</TableCell>
              <TableCell width={64} align="center">ML</TableCell>
              <TableCell width={120}>NIST 1.1</TableCell>
              <TableCell width={160}>Status</TableCell>
              <TableCell width={200}>2025 Attestation</TableCell>
              <TableCell width={180}>2024 Assessor Score</TableCell>
              <TableCell width={96} align="center">Actions</TableCell>
            </TableRow>
          </TableHead>

          <TableBody>
            {localRows.map((r, idx) => {
              const k = rowKey(r);
              return (
                <Row
                  key={k}
                  index={idx + 1}
                  row={r}
                  saving={saving.get(k)}
                  onSave={handleSave}
                />
              );
            })}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
}

// --- individual row --------------------------------------------------------

function Row({ index, row, saving, onSave }) {
  const mlTint = (theme) => {
    // subtle, professional row tints with a left border accent
    const base =
      row.maturityLevel === 4
        ? alpha(theme.palette.warning.main, 0.06)
        : alpha(theme.palette.primary.main, 0.04); // ML=3
    const left =
      row.maturityLevel === 4
        ? alpha(theme.palette.warning.main, 0.9)
        : alpha(theme.palette.primary.main, 0.8);

    return {
      bgcolor: base,
      '&::before': {
        content: '""',
        position: 'absolute',
        left: 0, top: 0, bottom: 0, width: 4,
        bgcolor: left,
        borderTopLeftRadius: 4, borderBottomLeftRadius: 4,
      }
    };
  };

  return (
    <TableRow
      hover
      sx={(t) => ({
        position: 'relative',
        ...(row.maturityLevel >= 3 ? mlTint(t) : {}),
      })}
    >
      <TableCell>{index}</TableCell>

      <TableCell>
        {row.attributeDefinition}
      </TableCell>

      <TableCell align="center">{row.maturityLevel}</TableCell>

      <TableCell>
        {row.csF1SubcategoryName || '—'}
      </TableCell>

      {/* Status (light chips) */}
      <TableCell>
        <Select
          fullWidth
          size="small"
          value={row.selectionStatus || ''}
          displayEmpty
          onChange={(e) => onSave(row, { selectionStatus: e.target.value || null })}
          renderValue={(v) => (
            <Chip
              size="small"
              label={v || '—'}
              variant="outlined"
              sx={(t) => ({ borderWidth: 1, ...statusChipStyle(t, v) })}
            />
          )}
        >
          <MenuItem value=""><em>—</em></MenuItem>
          {STATUS_OPTIONS.map(opt => (
            <MenuItem key={opt} value={opt}>{opt}</MenuItem>
          ))}
        </Select>
      </TableCell>

      {/* 2025 Attestation (deep chips) */}
      <TableCell>
        <Select
          fullWidth
          size="small"
          value={row.selectionAttestation || ''}
          displayEmpty
          onChange={(e) => onSave(row, { selectionAttestation: e.target.value || null })}
          renderValue={(v) => (
            <Chip
              size="small"
              label={v || '—'}
              sx={(t) => ({
                ...attestationChipStyle(t, v),
                fontWeight: 600,
              })}
            />
          )}
        >
          <MenuItem value=""><em>—</em></MenuItem>
          {ATTEST_OPTIONS.map(opt => (
            <MenuItem key={opt} value={opt}>{opt}</MenuItem>
          ))}
        </Select>
      </TableCell>

      {/* 2024 Assessor Score (deep chips, read-only) */}
      <TableCell>
        {row.assessScore2024 ? (
          <Chip
            size="small"
            label={row.assessScore2024}
            sx={(t) => ({
              ...assessorChipStyle(t, row.assessScore2024),
              fontWeight: 600,
            })}
          />
        ) : '—'}
      </TableCell>

      {/* Actions: spinner while saving, then green check */}
      <TableCell align="center">
        {saving === 'saving' ? (
          <CircularProgress size={22} />
        ) : saving === 'saved' ? (
          <Tooltip title="Saved">
            <CheckCircleRoundedIcon color="success" />
          </Tooltip>
        ) : null}
      </TableCell>
    </TableRow>
  );
}
