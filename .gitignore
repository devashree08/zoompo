import * as React from 'react';
import {
  List, ListItemButton, ListItemText, Collapse, Chip, Stack, Typography
} from '@mui/material';
import { ExpandLess, ExpandMore } from '@mui/icons-material';

function NodeRow({ node, level, selectedId, onSelect, renderAdornment, renderCounts }) {
  const [open, setOpen] = React.useState(level < 1); // open functions by default

  const hasChildren = !!node.children?.length;
  const isLeaf = !hasChildren;
  const selected = String(node.id) === String(selectedId);

  const leftAdornment = renderAdornment ? renderAdornment(node, level) : null;
  const rightAdornment = renderCounts && isLeaf ? renderCounts(node) : null;

  const handleClick = () => {
    if (isLeaf) onSelect?.(node.id);
    else setOpen(o => !o);
  };

  return (
    <>
      <ListItemButton
        dense
        selected={selected}
        onClick={handleClick}
        sx={{ pl: 1 + level * 2 }}
      >
        {leftAdornment}
        <ListItemText
          primary={
            <Stack direction="row" spacing={1} alignItems="center">
              <Typography variant={level === 0 ? 'subtitle1' : level === 1 ? 'body1' : 'body2'}>
                {node.label}
              </Typography>
              {rightAdornment}
            </Stack>
          }
          secondary={node.sublabel}
          secondaryTypographyProps={{ variant: 'caption', color: 'text.secondary' }}
        />
        {hasChildren ? (open ? <ExpandLess /> : <ExpandMore />) : null}
      </ListItemButton>
      {hasChildren && (
        <Collapse in={open} unmountOnExit timeout="auto">
          <List disablePadding>
            {node.children.map((child) => (
              <NodeRow
                key={child.id}
                node={child}
                level={level + 1}
                selectedId={selectedId}
                onSelect={onSelect}
                renderAdornment={renderAdornment}
                renderCounts={renderCounts}
              />
            ))}
          </List>
        </Collapse>
      )}
    </>
  );
}

export default function TreeAccordion({
  nodes = [], selectedId, onSelect,
  renderAdornment, renderCounts
}) {
  return (
    <List disablePadding>
      {nodes.map((n) => (
        <NodeRow
          key={n.id}
          node={n}
          level={0}
          selectedId={selectedId}
          onSelect={onSelect}
          renderAdornment={renderAdornment}
          renderCounts={renderCounts}
        />
      ))}
    </List>
  );
}

