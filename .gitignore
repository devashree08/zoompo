// src/ui/data/excelExport.js
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';

/**
 * exportWorkbook({
 *   filename: 'my-file.xlsx',
 *   sheets: [
 *     {
 *       name: 'Attributes',
 *       columns: [
 *         { key:'org', header:'Org', width: 10 },
 *         { key:'attributeDefinition', header:'Attribute Definition', width: 60, wrap: true },
 *         // optional:
 *         // style: { alignment, font, fill, numFmt, ... }  (applies to entire column)
 *         // value: (row) => value                         (per-cell value override)
 *         // format: (cell, val, row) => { ... }           (per-cell style/format)
 *       ],
 *       rows: [ {...}, {...} ],
 *       freezeHeader: true,
 *       autoFilter: true
 *     },
 *     ...
 *   ]
 * })
 */
export async function exportWorkbook({ filename = 'export.xlsx', sheets = [] }) {
  const wb = new ExcelJS.Workbook();
  wb.creator = 'CSF Portal';
  wb.created = new Date();

  for (const s of sheets) {
    const ws = wb.addWorksheet(s.name || 'Sheet', {
      properties: { defaultRowHeight: 18 },
      views: [{ state: 'frozen', ySplit: s.freezeHeader ? 1 : 0 }],
    });

    // Define columns
    ws.columns = (s.columns || []).map(col => ({
      header: col.header,
      key: col.key,
      width: col.width || 20,
      style: col.style || {},
    }));

    // Header style
    const header = ws.getRow(1);
    header.font = { bold: true };
    header.alignment = { vertical: 'middle' };
    header.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFEFF3F8' } }; // light grey-blue
    header.height = 20;

    // Add rows
    for (const row of (s.rows || [])) {
      const excelRow = {};
      for (const col of s.columns) {
        const val = col.value ? col.value(row) : row[col.key];
        excelRow[col.key] = val;
      }
      const added = ws.addRow(excelRow);

      // Per-cell formatters
      s.columns.forEach((col, idx) => {
        const cell = added.getCell(idx + 1);
        // Wrap if requested
        if (col.wrap) {
          cell.alignment = { ...(cell.alignment || {}), wrapText: true, vertical: 'top' };
        }
        if (typeof col.format === 'function') {
          const v = col.value ? col.value(row) : row[col.key];
          col.format(cell, v, row);
        }
      });
    }

    if (s.autoFilter) {
      ws.autoFilter = {
        from: { row: 1, column: 1 },
        to: { row: 1, column: (s.columns || []).length },
      };
    }

    // Borders (optional â€“ light bottom grid for readability)
    ws.eachRow((r, rowNumber) => {
      if (rowNumber === 1) return; // skip header
      r.eachCell((cell) => {
        cell.border = {
          top:    { style: 'thin', color: { argb: 'FFEAEAEA' } },
          left:   { style: 'thin', color: { argb: 'FFEAEAEA' } },
          bottom: { style: 'thin', color: { argb: 'FFEAEAEA' } },
          right:  { style: 'thin', color: { argb: 'FFEAEAEA' } },
        };
      });
    });
  }

  const buf = await wb.xlsx.writeBuffer();
  saveAs(new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }), filename);
}
