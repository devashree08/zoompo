// src/features/attributeMapping/components/organisms/RightHeaderComposite.jsx
import * as React from 'react';
import {
  Box, Paper, Grid, Stack, Typography, Chip, Collapse, IconButton, Button,
  Dialog, DialogTitle, DialogContent, Divider, Tooltip
} from '@mui/material';
import { ExpandLess, ExpandMore, OpenInNew } from '@mui/icons-material';

/** Small helper: "Show more" with dialog */
function ExpandableText({ title, text, previewChars = 260 }) {
  const [expanded, setExpanded] = React.useState(false);
  const [openDlg, setOpenDlg] = React.useState(false);

  if (!text) return null;
  const isLong = text.length > previewChars;
  const preview = isLong && !expanded ? text.slice(0, previewChars) + '…' : text;

  return (
    <Box>
      <Typography variant="overline" color="text.secondary">{title}</Typography>
      <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>{preview}</Typography>

      {isLong && (
        <Stack direction="row" spacing={1} sx={{ mt: 0.75 }}>
          <Button size="small" onClick={() => setExpanded(v => !v)}>
            {expanded ? 'Show less' : 'Show more'}
          </Button>
          <Button size="small" endIcon={<OpenInNew fontSize="small" />} onClick={() => setOpenDlg(true)}>
            Open in dialog
          </Button>
        </Stack>
      )}

      <Dialog open={openDlg} onClose={() => setOpenDlg(false)} maxWidth="md" fullWidth>
        <DialogTitle>{title}</DialogTitle>
        <DialogContent dividers>
          <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>{text}</Typography>
        </DialogContent>
      </Dialog>
    </Box>
  );
}

export default function RightHeaderComposite({
  header,            // normalized header for active org + subcat
  associatedRows,    // ALL rows for the selected subcat (all orgs). We’ll distill 1.1 list from this
  ownerCsv,          // owners for active org/subcat (string, comma-separated)
  custodianCsv       // custodians for active org/subcat (string, comma-separated)
}) {
  const [open, setOpen] = React.useState(true);

  if (!header) return null;

  // Distinct associated CSF 1.1 subcategories (name + language)
  const assoc11 = React.useMemo(() => {
    const seen = new Set();
    const out = [];
    (associatedRows || []).forEach(r => {
      if (!r.csF1SubcategoryID) return;
      const key = `${r.csF1SubcategoryName}|${r.csF1SubcategoryLanguage}`;
      if (!seen.has(key)) {
        seen.add(key);
        out.push({ name: r.csF1SubcategoryName, language: r.csF1SubcategoryLanguage });
      }
    });
    return out;
  }, [associatedRows]);

  const owners = (ownerCsv || '')
    .split(',')
    .map(x => x.trim())
    .filter(Boolean);

  const custodians = (custodianCsv || '')
    .split(',')
    .map(x => x.trim())
    .filter(Boolean);

  return (
    <Paper variant="outlined" sx={{ borderRadius: 2 }}>
      {/* Collapsible bar shows only CSF 2.0 subcat + language when closed */}
      <Box
        sx={{
          px: 1.25, py: 1,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          borderBottom: open ? '1px solid rgba(0,0,0,0.08)' : 'none',
          cursor: 'pointer'
        }}
        onClick={() => setOpen(v => !v)}
      >
        <Stack spacing={0}>
          <Typography variant="subtitle1" fontWeight={800}>
            {header.csF2SubcategoryName}
          </Typography>
          {!open && (
            <Typography variant="body2" color="text.secondary" noWrap title={header.csF2SubcategoryLanguage}>
              {header.csF2SubcategoryLanguage}
            </Typography>
          )}
        </Stack>
        <IconButton size="small" onClick={(e) => { e.stopPropagation(); setOpen(v => !v); }}>
          {open ? <ExpandLess /> : <ExpandMore />}
        </IconButton>
      </Box>

      <Collapse in={open} unmountOnExit>
        <Box sx={{ p: { xs: 1.25, md: 1.75 } }}>
          <Grid container spacing={2}>
            {/* Left 3 cards in a row (responsive) */}
            <Grid item xs={12} lg={9}>
              <Grid container spacing={2}>
                {/* FUNCTION */}
                <Grid item xs={12} md={4}>
                  <Paper variant="outlined" sx={{ p: 1.25, borderRadius: 2, height: '100%' }}>
                    <Typography variant="overline" color="text.secondary">FUNCTION</Typography>
                    <Typography variant="h6" fontWeight={900} sx={{ mb: 0.5 }}>
                      {header.functionName}
                    </Typography>
                    <Typography variant="body1" color="text.secondary" sx={{ whiteSpace: 'pre-wrap' }}>
                      {header.functionLanguage}
                    </Typography>
                  </Paper>
                </Grid>

                {/* CATEGORY */}
                <Grid item xs={12} md={4}>
                  <Paper variant="outlined" sx={{ p: 1.25, borderRadius: 2, height: '100%' }}>
                    <Typography variant="overline" color="text.secondary">CATEGORY</Typography>
                    <Typography variant="h6" fontWeight={900} sx={{ mb: 0.5 }}>
                      {header.categoryName}
                    </Typography>
                    <Typography variant="body1" color="text.secondary" sx={{ whiteSpace: 'pre-wrap' }}>
                      {header.categoryLanguage}
                    </Typography>
                  </Paper>
                </Grid>

                {/* CSF 2.0 SUBCATEGORY + Owners/Custodians */}
                <Grid item xs={12} md={4}>
                  <Paper variant="outlined" sx={{ p: 1.25, borderRadius: 2, height: '100%' }}>
                    <Typography variant="overline" color="text.secondary">CSF 2.0 SUBCATEGORY</Typography>
                    <Typography variant="h6" fontWeight={900} sx={{ mb: 0.5 }}>
                      {header.csF2SubcategoryName}
                    </Typography>
                    <Typography variant="body1" color="text.secondary" sx={{ whiteSpace: 'pre-wrap', mb: 1 }}>
                      {header.csF2SubcategoryLanguage}
                    </Typography>
                    {(owners.length > 0 || custodians.length > 0) && (
                      <Stack spacing={1} sx={{ mt: 0.25 }}>
                        {owners.length > 0 && (
                          <Stack direction="row" spacing={1} flexWrap="wrap">
                            <Typography variant="overline" color="text.secondary">OWNER</Typography>
                            {owners.map((n, i) => (
                              <Chip key={`own-${i}`} size="small" variant="outlined" label={n} />
                            ))}
                          </Stack>
                        )}
                        {custodians.length > 0 && (
                          <Stack direction="row" spacing={1} flexWrap="wrap">
                            <Typography variant="overline" color="text.secondary">CUSTODIAN</Typography>
                            {custodians.map((n, i) => (
                              <Chip key={`cus-${i}`} size="small" variant="outlined" label={n} />
                            ))}
                          </Stack>
                        )}
                      </Stack>
                    )}
                  </Paper>
                </Grid>

                {/* Change Summary / Implementation Examples */}
                <Grid item xs={12} md={6}>
                  <Paper variant="outlined" sx={{ p: 1.25, borderRadius: 2, height: '100%' }}>
                    <ExpandableText title="CHANGE SUMMARY" text={header.changeSummary || ''} />
                  </Paper>
                </Grid>
                <Grid item xs={12} md={6}>
                  <Paper variant="outlined" sx={{ p: 1.25, borderRadius: 2, height: '100%' }}>
                    <ExpandableText title="IMPLEMENTATION EXAMPLES" text={header.implementationExamples || ''} />
                    {/* Optional helper link if you add it to header later */}
                    {header.helperLink && (
                      <Box sx={{ mt: 1 }}>
                        <Tooltip title="Opens in a new tab">
                          <Button
                            href={header.helperLink}
                            target="_blank"
                            rel="noopener noreferrer"
                            size="small"
                            endIcon={<OpenInNew fontSize="small" />}
                          >
                            Link to Helper Document
                          </Button>
                        </Tooltip>
                      </Box>
                    )}
                  </Paper>
                </Grid>
              </Grid>
            </Grid>

            {/* Right card: Associated 1.1 subcategories */}
            <Grid item xs={12} lg={3}>
              <Paper variant="outlined" sx={{ p: 1.25, borderRadius: 2, height: '100%' }}>
                <Typography variant="overline" color="text.secondary">
                  ASSOCIATED 1.1 SUBCATEGORIES
                </Typography>
                <Divider sx={{ my: 1 }} />
                {assoc11.length === 0 ? (
                  <Typography variant="body2" color="text.secondary">None</Typography>
                ) : (
                  <Box component="ul" sx={{ pl: 2, m: 0 }}>
                    {assoc11.map((s, i) => (
                      <li key={i} style={{ marginBottom: 8 }}>
                        <Typography variant="body1" fontWeight={700}>{s.name}</Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ whiteSpace: 'pre-wrap' }}>
                          {s.language}
                        </Typography>
                      </li>
                    ))}
                  </Box>
                )}
              </Paper>
            </Grid>
          </Grid>
        </Box>
      </Collapse>
    </Paper>
  );
}
