using System.Data;
using Dapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Diagnostics.HealthChecks;

namespace Gef.Portal.Errors.Health;

/// <summary>
/// Readiness probe: verifies DB connectivity AND that the policy SP executes.
/// Returns Healthy when both succeed, Unhealthy otherwise.
/// Keep timeout short so probes don't hang.
/// </summary>
public sealed class PortalPolicyHealthCheck(GEF_DbContext db) : IHealthCheck
{
    private readonly GEF_DbContext _db = db;

    public async Task<HealthCheckResult> CheckHealthAsync(
        HealthCheckContext context,
        CancellationToken cancellationToken = default)
    {
        try
        {
            await using var conn = _db.Database.GetDbConnection();
            if (conn.State != ConnectionState.Open)
                await conn.OpenAsync(cancellationToken);

            // Minimal, non-sensitive invocation; null inputs are fine.
            var cmd = new CommandDefinition(
                commandText: "dbo.usp_PortalPolicies_GetForUser",
                parameters: new { UserEID = (string?)null, UserName = (string?)null },
                commandType: CommandType.StoredProcedure,
                commandTimeout: 2,                      // short timeout for probes
                cancellationToken: cancellationToken);

            await conn.ExecuteAsync(cmd);

            return HealthCheckResult.Healthy("DB reachable and policy SP executable.");
        }
        catch (Exception ex)
        {
            // No PII; infra just needs Healthy/Unhealthy
            return HealthCheckResult.Unhealthy("DB connectivity or policy SP failed.", ex);
        }
    }
}
